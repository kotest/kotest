public final class io/kotest/assertions/json/ArrayOrder : java/lang/Enum {
	public static final field Lenient Lio/kotest/assertions/json/ArrayOrder;
	public static final field Strict Lio/kotest/assertions/json/ArrayOrder;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/assertions/json/ArrayOrder;
	public static fun values ()[Lio/kotest/assertions/json/ArrayOrder;
}

public final class io/kotest/assertions/json/CompareJsonOptions {
	public fun <init> ()V
	public fun <init> (Lio/kotest/assertions/json/PropertyOrder;Lio/kotest/assertions/json/ArrayOrder;Lio/kotest/assertions/json/FieldComparison;Lio/kotest/assertions/json/NumberFormat;Lio/kotest/assertions/json/TypeCoercion;)V
	public synthetic fun <init> (Lio/kotest/assertions/json/PropertyOrder;Lio/kotest/assertions/json/ArrayOrder;Lio/kotest/assertions/json/FieldComparison;Lio/kotest/assertions/json/NumberFormat;Lio/kotest/assertions/json/TypeCoercion;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getArrayOrder ()Lio/kotest/assertions/json/ArrayOrder;
	public final fun getFieldComparison ()Lio/kotest/assertions/json/FieldComparison;
	public final fun getNumberFormat ()Lio/kotest/assertions/json/NumberFormat;
	public final fun getPropertyOrder ()Lio/kotest/assertions/json/PropertyOrder;
	public final fun getTypeCoercion ()Lio/kotest/assertions/json/TypeCoercion;
	public final fun setArrayOrder (Lio/kotest/assertions/json/ArrayOrder;)V
	public final fun setFieldComparison (Lio/kotest/assertions/json/FieldComparison;)V
	public final fun setNumberFormat (Lio/kotest/assertions/json/NumberFormat;)V
	public final fun setPropertyOrder (Lio/kotest/assertions/json/PropertyOrder;)V
	public final fun setTypeCoercion (Lio/kotest/assertions/json/TypeCoercion;)V
}

public final class io/kotest/assertions/json/CompareKt {
	public static final fun compareJsonOptions (Lkotlin/jvm/functions/Function1;)Lio/kotest/assertions/json/CompareJsonOptions;
}

public final class io/kotest/assertions/json/CompareMode : java/lang/Enum {
	public static final field Lenient Lio/kotest/assertions/json/CompareMode;
	public static final field Strict Lio/kotest/assertions/json/CompareMode;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/assertions/json/CompareMode;
	public static fun values ()[Lio/kotest/assertions/json/CompareMode;
}

public final class io/kotest/assertions/json/CompareOrder : java/lang/Enum {
	public static final field Lenient Lio/kotest/assertions/json/CompareOrder;
	public static final field Strict Lio/kotest/assertions/json/CompareOrder;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/assertions/json/CompareOrder;
	public static fun values ()[Lio/kotest/assertions/json/CompareOrder;
}

public final class io/kotest/assertions/json/ContainsSpec {
	public fun <init> (Lio/kotest/assertions/json/schema/JsonSchemaElement;II)V
	public synthetic fun <init> (Lio/kotest/assertions/json/schema/JsonSchemaElement;IIILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getMaxContains ()I
	public final fun getMinContains ()I
	public final fun getSchema ()Lio/kotest/assertions/json/schema/JsonSchemaElement;
}

public final class io/kotest/assertions/json/ContainsSpecSerializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Lio/kotest/assertions/json/ContainsSpecSerializer;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lio/kotest/assertions/json/ContainsSpec;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lio/kotest/assertions/json/ContainsSpec;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
}

public final class io/kotest/assertions/json/ErrorsKt {
	public static final fun asString (Lio/kotest/assertions/json/JsonError;)Ljava/lang/String;
}

public abstract interface class io/kotest/assertions/json/ExtractValueOutcome {
}

public final class io/kotest/assertions/json/ExtractedValue : io/kotest/assertions/json/ExtractValueOutcome {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/kotest/assertions/json/ExtractedValue;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/ExtractedValue;Ljava/lang/Object;ILjava/lang/Object;)Lio/kotest/assertions/json/ExtractedValue;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/FieldComparison : java/lang/Enum {
	public static final field Lenient Lio/kotest/assertions/json/FieldComparison;
	public static final field Strict Lio/kotest/assertions/json/FieldComparison;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/assertions/json/FieldComparison;
	public static fun values ()[Lio/kotest/assertions/json/FieldComparison;
}

public final class io/kotest/assertions/json/JsonArrayElementRef {
	public fun <init> (Ljava/lang/String;I)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun copy (Ljava/lang/String;I)Lio/kotest/assertions/json/JsonArrayElementRef;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonArrayElementRef;Ljava/lang/String;IILjava/lang/Object;)Lio/kotest/assertions/json/JsonArrayElementRef;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getIndex ()I
	public final fun getPathToArray ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class io/kotest/assertions/json/JsonError {
	public abstract fun getPath ()Ljava/util/List;
}

public final class io/kotest/assertions/json/JsonError$ExpectedArray : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Lio/kotest/assertions/json/JsonNode;
	public final fun copy (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;)Lio/kotest/assertions/json/JsonError$ExpectedArray;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$ExpectedArray;Ljava/util/List;Lio/kotest/assertions/json/JsonNode;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$ExpectedArray;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getB ()Lio/kotest/assertions/json/JsonNode;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$ExpectedNull : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Lio/kotest/assertions/json/JsonNode;
	public final fun copy (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;)Lio/kotest/assertions/json/JsonError$ExpectedNull;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$ExpectedNull;Ljava/util/List;Lio/kotest/assertions/json/JsonNode;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$ExpectedNull;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getB ()Lio/kotest/assertions/json/JsonNode;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$ExpectedObject : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Lio/kotest/assertions/json/JsonNode;
	public final fun copy (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;)Lio/kotest/assertions/json/JsonError$ExpectedObject;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$ExpectedObject;Ljava/util/List;Lio/kotest/assertions/json/JsonNode;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$ExpectedObject;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getB ()Lio/kotest/assertions/json/JsonNode;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$IncompatibleTypes : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;Lio/kotest/assertions/json/JsonNode;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Lio/kotest/assertions/json/JsonNode;
	public final fun component3 ()Lio/kotest/assertions/json/JsonNode;
	public final fun copy (Ljava/util/List;Lio/kotest/assertions/json/JsonNode;Lio/kotest/assertions/json/JsonNode;)Lio/kotest/assertions/json/JsonError$IncompatibleTypes;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$IncompatibleTypes;Ljava/util/List;Lio/kotest/assertions/json/JsonNode;Lio/kotest/assertions/json/JsonNode;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$IncompatibleTypes;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getA ()Lio/kotest/assertions/json/JsonNode;
	public final fun getB ()Lio/kotest/assertions/json/JsonNode;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$NameOrderDiff : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;ILjava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()I
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun copy (Ljava/util/List;ILjava/lang/String;Ljava/lang/String;)Lio/kotest/assertions/json/JsonError$NameOrderDiff;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$NameOrderDiff;Ljava/util/List;ILjava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$NameOrderDiff;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getActual ()Ljava/lang/String;
	public final fun getExpected ()Ljava/lang/String;
	public final fun getIndex ()I
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$ObjectExtraKeys : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Ljava/util/Set;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Ljava/util/Set;
	public final fun copy (Ljava/util/List;Ljava/util/Set;)Lio/kotest/assertions/json/JsonError$ObjectExtraKeys;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$ObjectExtraKeys;Ljava/util/List;Ljava/util/Set;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$ObjectExtraKeys;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getExtra ()Ljava/util/Set;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$ObjectMissingKeys : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Ljava/util/Set;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Ljava/util/Set;
	public final fun copy (Ljava/util/List;Ljava/util/Set;)Lio/kotest/assertions/json/JsonError$ObjectMissingKeys;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$ObjectMissingKeys;Ljava/util/List;Ljava/util/Set;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$ObjectMissingKeys;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMissing ()Ljava/util/Set;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$UnequalArrayContent : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Lio/kotest/assertions/json/JsonNode$ArrayNode;Lio/kotest/assertions/json/JsonNode;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Lio/kotest/assertions/json/JsonNode$ArrayNode;
	public final fun component3 ()Lio/kotest/assertions/json/JsonNode;
	public final fun copy (Ljava/util/List;Lio/kotest/assertions/json/JsonNode$ArrayNode;Lio/kotest/assertions/json/JsonNode;)Lio/kotest/assertions/json/JsonError$UnequalArrayContent;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$UnequalArrayContent;Ljava/util/List;Lio/kotest/assertions/json/JsonNode$ArrayNode;Lio/kotest/assertions/json/JsonNode;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$UnequalArrayContent;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getExpected ()Lio/kotest/assertions/json/JsonNode$ArrayNode;
	public final fun getMissing ()Lio/kotest/assertions/json/JsonNode;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$UnequalArrayLength : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;II)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()I
	public final fun component3 ()I
	public final fun copy (Ljava/util/List;II)Lio/kotest/assertions/json/JsonError$UnequalArrayLength;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$UnequalArrayLength;Ljava/util/List;IIILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$UnequalArrayLength;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getActual ()I
	public final fun getExpected ()I
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$UnequalBooleans : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;ZZ)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Z
	public final fun component3 ()Z
	public final fun copy (Ljava/util/List;ZZ)Lio/kotest/assertions/json/JsonError$UnequalBooleans;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$UnequalBooleans;Ljava/util/List;ZZILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$UnequalBooleans;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getA ()Z
	public final fun getB ()Z
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$UnequalStrings : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)Lio/kotest/assertions/json/JsonError$UnequalStrings;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$UnequalStrings;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$UnequalStrings;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getA ()Ljava/lang/String;
	public final fun getB ()Ljava/lang/String;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonError$UnequalValues : io/kotest/assertions/json/JsonError {
	public fun <init> (Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Ljava/lang/Object;
	public final fun component3 ()Ljava/lang/Object;
	public final fun copy (Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Lio/kotest/assertions/json/JsonError$UnequalValues;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonError$UnequalValues;Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonError$UnequalValues;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getA ()Ljava/lang/Object;
	public final fun getB ()Ljava/lang/Object;
	public fun getPath ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonMatchersKt {
	public static final fun beJsonArray ()Lio/kotest/matchers/Matcher;
	public static final fun beJsonObject ()Lio/kotest/matchers/Matcher;
	public static final fun beJsonType (Lkotlin/reflect/KClass;)Lio/kotest/matchers/Matcher;
	public static final fun beValidJson ()Lio/kotest/matchers/Matcher;
	public static final fun matchJson (Ljava/lang/String;)Lio/kotest/matchers/Matcher;
	public static final fun shouldBeEmptyJsonArray (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldBeEmptyJsonObject (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldBeJsonArray (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldBeJsonObject (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldBeValidJson (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareJsonOptions;)V
	public static final fun shouldEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareMode;Lio/kotest/assertions/json/CompareOrder;)V
	public static final fun shouldMatchJson (Ljava/lang/String;Ljava/lang/String;)V
	public static final fun shouldNotBeJsonArray (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldNotBeJsonObject (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldNotBeValidJson (Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldNotEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareJsonOptions;)V
	public static final fun shouldNotEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareMode;Lio/kotest/assertions/json/CompareOrder;)V
	public static final fun shouldNotMatchJson (Ljava/lang/String;Ljava/lang/String;)V
}

public abstract class io/kotest/assertions/json/JsonNode {
	public static final field Companion Lio/kotest/assertions/json/JsonNode$Companion;
	public synthetic fun <init> (ILkotlinx/serialization/internal/SerializationConstructorMarker;)V
	public final fun type ()Ljava/lang/String;
	public static final synthetic fun write$Self (Lio/kotest/assertions/json/JsonNode;Lkotlinx/serialization/encoding/CompositeEncoder;Lkotlinx/serialization/descriptors/SerialDescriptor;)V
}

public final class io/kotest/assertions/json/JsonNode$ArrayNode : io/kotest/assertions/json/JsonNode {
	public fun <init> (Ljava/util/List;)V
	public final fun component1 ()Ljava/util/List;
	public final fun copy (Ljava/util/List;)Lio/kotest/assertions/json/JsonNode$ArrayNode;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonNode$ArrayNode;Ljava/util/List;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonNode$ArrayNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getElements ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonNode$BooleanNode : io/kotest/assertions/json/JsonNode, io/kotest/assertions/json/JsonNode$ValueNode {
	public fun <init> (Z)V
	public final fun component1 ()Z
	public final fun copy (Z)Lio/kotest/assertions/json/JsonNode$BooleanNode;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonNode$BooleanNode;ZILjava/lang/Object;)Lio/kotest/assertions/json/JsonNode$BooleanNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonNode$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class io/kotest/assertions/json/JsonNode$NullNode : io/kotest/assertions/json/JsonNode, io/kotest/assertions/json/JsonNode$ValueNode {
	public static final field INSTANCE Lio/kotest/assertions/json/JsonNode$NullNode;
}

public final class io/kotest/assertions/json/JsonNode$NumberNode : io/kotest/assertions/json/JsonNode, io/kotest/assertions/json/JsonNode$ValueNode {
	public static final field Companion Lio/kotest/assertions/json/JsonNode$NumberNode$Companion;
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lio/kotest/assertions/json/JsonNode$NumberNode;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonNode$NumberNode;Ljava/lang/String;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonNode$NumberNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getContent ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun lenientEquals (Lio/kotest/assertions/json/JsonNode$NumberNode;)Z
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonNode$NumberNode$Companion {
}

public final class io/kotest/assertions/json/JsonNode$ObjectNode : io/kotest/assertions/json/JsonNode {
	public fun <init> (Ljava/util/Map;)V
	public final fun component1 ()Ljava/util/Map;
	public final fun copy (Ljava/util/Map;)Lio/kotest/assertions/json/JsonNode$ObjectNode;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonNode$ObjectNode;Ljava/util/Map;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonNode$ObjectNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getElements ()Ljava/util/Map;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonNode$StringNode : io/kotest/assertions/json/JsonNode, io/kotest/assertions/json/JsonNode$ValueNode {
	public static final field Companion Lio/kotest/assertions/json/JsonNode$StringNode$Companion;
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lio/kotest/assertions/json/JsonNode$StringNode;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonNode$StringNode;Ljava/lang/String;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonNode$StringNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonNode$StringNode$Companion {
}

public abstract interface class io/kotest/assertions/json/JsonNode$ValueNode {
}

public final class io/kotest/assertions/json/JsonPathNotFound : io/kotest/assertions/json/ExtractValueOutcome {
	public static final field INSTANCE Lio/kotest/assertions/json/JsonPathNotFound;
}

public final class io/kotest/assertions/json/JsonSubPathFound : io/kotest/assertions/json/JsonSubPathSearchOutcome {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lio/kotest/assertions/json/JsonSubPathFound;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonSubPathFound;Ljava/lang/String;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonSubPathFound;
	public fun description ()Ljava/lang/String;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getSubPath ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonSubPathJsonArrayTooShort : io/kotest/assertions/json/JsonSubPathSearchOutcome {
	public fun <init> (Ljava/lang/String;II)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun component3 ()I
	public final fun copy (Ljava/lang/String;II)Lio/kotest/assertions/json/JsonSubPathJsonArrayTooShort;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonSubPathJsonArrayTooShort;Ljava/lang/String;IIILjava/lang/Object;)Lio/kotest/assertions/json/JsonSubPathJsonArrayTooShort;
	public fun description ()Ljava/lang/String;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getArraySize ()I
	public final fun getExpectedIndex ()I
	public final fun getSubPath ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonSubPathNotFound : io/kotest/assertions/json/JsonSubPathSearchOutcome {
	public static final field INSTANCE Lio/kotest/assertions/json/JsonSubPathNotFound;
	public fun description ()Ljava/lang/String;
}

public abstract interface class io/kotest/assertions/json/JsonSubPathSearchOutcome {
	public abstract fun description ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/JsonTree {
	public fun <init> (Lio/kotest/assertions/json/JsonNode;Ljava/lang/String;)V
	public final fun component1 ()Lio/kotest/assertions/json/JsonNode;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lio/kotest/assertions/json/JsonNode;Ljava/lang/String;)Lio/kotest/assertions/json/JsonTree;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/JsonTree;Lio/kotest/assertions/json/JsonNode;Ljava/lang/String;ILjava/lang/Object;)Lio/kotest/assertions/json/JsonTree;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getRaw ()Ljava/lang/String;
	public final fun getRoot ()Lio/kotest/assertions/json/JsonNode;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/KeysKt {
	public static final fun containJsonKey (Ljava/lang/String;)Lio/kotest/matchers/Matcher;
	public static final fun shouldContainJsonKey (Ljava/lang/String;Ljava/lang/String;)V
	public static final fun shouldNotContainJsonKey (Ljava/lang/String;Ljava/lang/String;)V
}

public final class io/kotest/assertions/json/KeyvaluesKt {
	public static final fun extractPossiblePathOfJsonArray (Ljava/lang/String;)Lio/kotest/assertions/json/JsonArrayElementRef;
	public static final fun findValidSubPath (Ljava/lang/String;Ljava/lang/String;)Lio/kotest/assertions/json/JsonSubPathSearchOutcome;
	public static final fun getPossibleSizeOfJsonArray (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Integer;
	public static final fun removeLastPartFromPath (Ljava/lang/String;)Ljava/lang/String;
}

public final class io/kotest/assertions/json/MatchersKt {
	public static final fun equalJson (Ljava/lang/String;Lio/kotest/assertions/json/CompareJsonOptions;)Lio/kotest/matchers/Matcher;
	public static final fun shouldEqualJson (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareMode;)V
	public static final fun shouldEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareOrder;)V
	public static final fun shouldEqualJson (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;
	public static final fun shouldEqualSpecifiedJson (Ljava/lang/String;Ljava/lang/String;)V
	public static final fun shouldEqualSpecifiedJsonIgnoringOrder (Ljava/lang/String;Ljava/lang/String;)V
	public static final fun shouldNotEqualJson (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	public static final fun shouldNotEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareMode;)V
	public static final fun shouldNotEqualJson (Ljava/lang/String;Ljava/lang/String;Lio/kotest/assertions/json/CompareOrder;)V
	public static final fun shouldNotEqualJson (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;
	public static final fun shouldNotEqualSpecifiedJson (Ljava/lang/String;Ljava/lang/String;)V
}

public final class io/kotest/assertions/json/NumberFormat : java/lang/Enum {
	public static final field Lenient Lio/kotest/assertions/json/NumberFormat;
	public static final field Strict Lio/kotest/assertions/json/NumberFormat;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/assertions/json/NumberFormat;
	public static fun values ()[Lio/kotest/assertions/json/NumberFormat;
}

public final class io/kotest/assertions/json/PropertyOrder : java/lang/Enum {
	public static final field Lenient Lio/kotest/assertions/json/PropertyOrder;
	public static final field Strict Lio/kotest/assertions/json/PropertyOrder;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/assertions/json/PropertyOrder;
	public static fun values ()[Lio/kotest/assertions/json/PropertyOrder;
}

public final class io/kotest/assertions/json/ResourcesKt {
	public static final fun matchJsonResource (Ljava/lang/String;)Lio/kotest/matchers/Matcher;
	public static final fun shouldMatchJsonResource (Ljava/lang/String;Ljava/lang/String;)V
	public static final fun shouldNotMatchJsonResource (Ljava/lang/String;Ljava/lang/String;)V
}

public final class io/kotest/assertions/json/TypeCoercion : java/lang/Enum {
	public static final field Disabled Lio/kotest/assertions/json/TypeCoercion;
	public static final field Enabled Lio/kotest/assertions/json/TypeCoercion;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/assertions/json/TypeCoercion;
	public static fun values ()[Lio/kotest/assertions/json/TypeCoercion;
}

public final class io/kotest/assertions/json/WrappersKt {
	public static final fun toJsonNode (Lkotlinx/serialization/json/JsonElement;)Lio/kotest/assertions/json/JsonNode;
}

public final class io/kotest/assertions/json/schema/BuilderKt {
	public static final fun array (Lio/kotest/assertions/json/schema/JsonSchema$Builder;IIZLio/kotest/assertions/json/ContainsSpec;Lkotlin/jvm/functions/Function0;)Lio/kotest/assertions/json/schema/JsonSchema$JsonArray;
	public static synthetic fun array$default (Lio/kotest/assertions/json/schema/JsonSchema$Builder;IIZLio/kotest/assertions/json/ContainsSpec;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonArray;
	public static final fun boolean (Lio/kotest/assertions/json/schema/JsonSchema$Builder;)Lio/kotest/assertions/json/schema/JsonSchema$JsonBoolean;
	public static final fun containsSpec (Lio/kotest/assertions/json/schema/JsonSchema$Builder;IILkotlin/jvm/functions/Function1;)Lio/kotest/assertions/json/ContainsSpec;
	public static synthetic fun containsSpec$default (Lio/kotest/assertions/json/schema/JsonSchema$Builder;IILkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/kotest/assertions/json/ContainsSpec;
	public static final fun decimal (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;)Lio/kotest/assertions/json/schema/JsonSchema$JsonDecimal;
	public static synthetic fun decimal$default (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonDecimal;
	public static final fun integer (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;)Lio/kotest/assertions/json/schema/JsonSchema$JsonInteger;
	public static synthetic fun integer$default (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonInteger;
	public static final fun jsonSchema (Lkotlin/jvm/functions/Function1;)Lio/kotest/assertions/json/schema/JsonSchema;
	public static final fun null (Lio/kotest/assertions/json/schema/JsonSchema$Builder;)Lio/kotest/assertions/json/schema/JsonSchema$Null;
	public static final fun number (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;)Lio/kotest/assertions/json/schema/JsonSchema$JsonDecimal;
	public static synthetic fun number$default (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonDecimal;
	public static final fun obj (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function1;)Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;
	public static synthetic fun obj$default (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;
	public static final fun string (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;)Lio/kotest/assertions/json/schema/JsonSchema$JsonString;
	public static synthetic fun string$default (Lio/kotest/assertions/json/schema/JsonSchema$Builder;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonString;
}

public final class io/kotest/assertions/json/schema/JsonSchema {
	public fun <init> (Lio/kotest/assertions/json/schema/JsonSchemaElement;)V
	public final fun component1 ()Lio/kotest/assertions/json/schema/JsonSchemaElement;
	public final fun copy (Lio/kotest/assertions/json/schema/JsonSchemaElement;)Lio/kotest/assertions/json/schema/JsonSchema;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/schema/JsonSchema;Lio/kotest/assertions/json/schema/JsonSchemaElement;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getRoot ()Lio/kotest/assertions/json/schema/JsonSchemaElement;
	public fun hashCode ()I
	public final fun invoke ()Lio/kotest/assertions/json/schema/JsonSchemaElement;
	public fun toString ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchema$Builder {
	public static final field INSTANCE Lio/kotest/assertions/json/schema/JsonSchema$Builder;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonArray : io/kotest/assertions/json/schema/JsonSchemaElement {
	public fun <init> ()V
	public fun <init> (IILio/kotest/matchers/Matcher;Lio/kotest/assertions/json/ContainsSpec;Lio/kotest/assertions/json/schema/JsonSchemaElement;)V
	public synthetic fun <init> (IILio/kotest/matchers/Matcher;Lio/kotest/assertions/json/ContainsSpec;Lio/kotest/assertions/json/schema/JsonSchemaElement;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun component3 ()Lio/kotest/matchers/Matcher;
	public final fun component4 ()Lio/kotest/assertions/json/ContainsSpec;
	public final fun component5 ()Lio/kotest/assertions/json/schema/JsonSchemaElement;
	public final fun copy (IILio/kotest/matchers/Matcher;Lio/kotest/assertions/json/ContainsSpec;Lio/kotest/assertions/json/schema/JsonSchemaElement;)Lio/kotest/assertions/json/schema/JsonSchema$JsonArray;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonArray;IILio/kotest/matchers/Matcher;Lio/kotest/assertions/json/ContainsSpec;Lio/kotest/assertions/json/schema/JsonSchemaElement;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonArray;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getContains ()Lio/kotest/assertions/json/ContainsSpec;
	public final fun getElementType ()Lio/kotest/assertions/json/schema/JsonSchemaElement;
	public final fun getMatcher ()Lio/kotest/matchers/Matcher;
	public final fun getMaxItems ()I
	public final fun getMinItems ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun typeName ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonBoolean : io/kotest/assertions/json/schema/JsonSchemaElement, io/kotest/assertions/json/schema/ValueNode {
	public static final field INSTANCE Lio/kotest/assertions/json/schema/JsonSchema$JsonBoolean;
	public fun getMatcher ()Lio/kotest/matchers/Matcher;
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public fun typeName ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonDecimal : io/kotest/assertions/json/schema/JsonSchema$JsonNumber, io/kotest/assertions/json/schema/JsonSchemaElement, io/kotest/assertions/json/schema/ValueNode {
	public fun <init> ()V
	public fun <init> (Lio/kotest/matchers/Matcher;)V
	public synthetic fun <init> (Lio/kotest/matchers/Matcher;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lio/kotest/matchers/Matcher;
	public final fun copy (Lio/kotest/matchers/Matcher;)Lio/kotest/assertions/json/schema/JsonSchema$JsonDecimal;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonDecimal;Lio/kotest/matchers/Matcher;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonDecimal;
	public fun equals (Ljava/lang/Object;)Z
	public fun getMatcher ()Lio/kotest/matchers/Matcher;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun typeName ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonInteger : io/kotest/assertions/json/schema/JsonSchema$JsonNumber, io/kotest/assertions/json/schema/JsonSchemaElement, io/kotest/assertions/json/schema/ValueNode {
	public fun <init> ()V
	public fun <init> (Lio/kotest/matchers/Matcher;)V
	public synthetic fun <init> (Lio/kotest/matchers/Matcher;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lio/kotest/matchers/Matcher;
	public final fun copy (Lio/kotest/matchers/Matcher;)Lio/kotest/assertions/json/schema/JsonSchema$JsonInteger;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonInteger;Lio/kotest/matchers/Matcher;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonInteger;
	public fun equals (Ljava/lang/Object;)Z
	public fun getMatcher ()Lio/kotest/matchers/Matcher;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun typeName ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonObject : io/kotest/assertions/json/schema/JsonSchemaElement {
	public static final field Companion Lio/kotest/assertions/json/schema/JsonSchema$JsonObject$Companion;
	public fun <init> (ZILjava/lang/Integer;Ljava/util/Map;Ljava/util/List;)V
	public synthetic fun <init> (ZILjava/lang/Integer;Ljava/util/Map;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Z
	public final fun component2 ()I
	public final fun component3 ()Ljava/lang/Integer;
	public final fun component4 ()Ljava/util/Map;
	public final fun component5 ()Ljava/util/List;
	public final fun copy (ZILjava/lang/Integer;Ljava/util/Map;Ljava/util/List;)Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;ZILjava/lang/Integer;Ljava/util/Map;Ljava/util/List;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;
	public fun equals (Ljava/lang/Object;)Z
	public final fun get (Ljava/lang/String;)Lio/kotest/assertions/json/schema/JsonSchemaElement;
	public final fun getAdditionalProperties ()Z
	public final fun getMaxProperties ()Ljava/lang/Integer;
	public final fun getMinProperties ()I
	public final fun getProperties ()Ljava/util/Map;
	public final fun getRequiredProperties ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun typeName ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonObject$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lio/kotest/assertions/json/schema/JsonSchema$JsonObject$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonObject$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder {
	public fun <init> ()V
	public final fun array (Ljava/lang/String;ZLkotlin/jvm/functions/Function0;)V
	public static synthetic fun array$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public final fun boolean (Ljava/lang/String;Z)V
	public static synthetic fun boolean$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZILjava/lang/Object;)V
	public final fun build ()Lio/kotest/assertions/json/schema/JsonSchema$JsonObject;
	public final fun decimal (Ljava/lang/String;ZLkotlin/jvm/functions/Function0;)V
	public static synthetic fun decimal$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public final fun getAdditionalProperties ()Z
	public final fun getMaxProperties ()Ljava/lang/Integer;
	public final fun getMinProperties ()I
	public final fun getProperties ()Ljava/util/Map;
	public final fun getRequiredProperties ()Ljava/util/List;
	public final fun integer (Ljava/lang/String;ZLkotlin/jvm/functions/Function0;)V
	public static synthetic fun integer$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public final fun null (Ljava/lang/String;Z)V
	public static synthetic fun null$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZILjava/lang/Object;)V
	public final fun number (Ljava/lang/String;ZLkotlin/jvm/functions/Function0;)V
	public static synthetic fun number$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public final fun obj (Ljava/lang/String;ZLkotlin/jvm/functions/Function1;)V
	public static synthetic fun obj$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZLkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
	public final fun setAdditionalProperties (Z)V
	public final fun setMaxProperties (Ljava/lang/Integer;)V
	public final fun setMinProperties (I)V
	public final fun setProperties (Ljava/util/Map;)V
	public final fun setRequiredProperties (Ljava/util/List;)V
	public final fun string (Ljava/lang/String;ZLkotlin/jvm/functions/Function0;)V
	public static synthetic fun string$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public final fun withProperty (Ljava/lang/String;ZLkotlin/jvm/functions/Function1;)V
	public static synthetic fun withProperty$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonObjectBuilder;Ljava/lang/String;ZLkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
}

public final class io/kotest/assertions/json/schema/JsonSchema$JsonString : io/kotest/assertions/json/schema/JsonSchemaElement, io/kotest/assertions/json/schema/ValueNode {
	public fun <init> ()V
	public fun <init> (Lio/kotest/matchers/Matcher;)V
	public synthetic fun <init> (Lio/kotest/matchers/Matcher;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lio/kotest/matchers/Matcher;
	public final fun copy (Lio/kotest/matchers/Matcher;)Lio/kotest/assertions/json/schema/JsonSchema$JsonString;
	public static synthetic fun copy$default (Lio/kotest/assertions/json/schema/JsonSchema$JsonString;Lio/kotest/matchers/Matcher;ILjava/lang/Object;)Lio/kotest/assertions/json/schema/JsonSchema$JsonString;
	public fun equals (Ljava/lang/Object;)Z
	public fun getMatcher ()Lio/kotest/matchers/Matcher;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun typeName ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchema$Null : io/kotest/assertions/json/schema/JsonSchemaElement {
	public static final field INSTANCE Lio/kotest/assertions/json/schema/JsonSchema$Null;
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public fun typeName ()Ljava/lang/String;
}

public abstract interface class io/kotest/assertions/json/schema/JsonSchemaElement {
	public static final field Companion Lio/kotest/assertions/json/schema/JsonSchemaElement$Companion;
	public abstract fun typeName ()Ljava/lang/String;
}

public final class io/kotest/assertions/json/schema/JsonSchemaElement$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public abstract interface annotation class io/kotest/assertions/json/schema/JsonSchemaMarker : java/lang/annotation/Annotation {
}

public final class io/kotest/assertions/json/schema/MatchSchemaKt {
	public static final fun getParseToJson ()Lio/kotest/matchers/Matcher;
	public static final fun matchSchema (Lio/kotest/assertions/json/schema/JsonSchema;)Lio/kotest/matchers/Matcher;
	public static final fun shouldMatchSchema (Ljava/lang/String;Lio/kotest/assertions/json/schema/JsonSchema;)V
	public static final fun shouldMatchSchema (Lkotlinx/serialization/json/JsonElement;Lio/kotest/assertions/json/schema/JsonSchema;)V
	public static final fun shouldNotMatchSchema (Ljava/lang/String;Lio/kotest/assertions/json/schema/JsonSchema;)V
	public static final fun shouldNotMatchSchema (Lkotlinx/serialization/json/JsonElement;Lio/kotest/assertions/json/schema/JsonSchema;)V
}

public final class io/kotest/assertions/json/schema/ParseKt {
	public static final fun parseSchema (Ljava/lang/String;)Lio/kotest/assertions/json/schema/JsonSchema;
}

