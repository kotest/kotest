public final class io/kotest/extensions/blockhound/BlockHound : io/kotest/core/extensions/TestCaseExtension {
	public static final field Companion Lio/kotest/extensions/blockhound/BlockHound$Companion;
	public fun <init> ()V
	public fun <init> (Lio/kotest/extensions/blockhound/BlockHoundMode;)V
	public synthetic fun <init> (Lio/kotest/extensions/blockhound/BlockHoundMode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun intercept (Lio/kotest/core/test/TestCase;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/kotest/extensions/blockhound/BlockHound$Companion {
}

public final class io/kotest/extensions/blockhound/BlockHound$ContextElement : kotlinx/coroutines/ThreadContextElement {
	public fun <init> (Lio/kotest/extensions/blockhound/BlockHoundMode;)V
	public fun fold (Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public fun get (Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;
	public fun getKey ()Lkotlin/coroutines/CoroutineContext$Key;
	public fun minusKey (Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;
	public fun plus (Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;
	public fun restoreThreadContext (Lkotlin/coroutines/CoroutineContext;Lio/kotest/extensions/blockhound/BlockHoundMode;)V
	public synthetic fun restoreThreadContext (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V
	public fun updateThreadContext (Lkotlin/coroutines/CoroutineContext;)Lio/kotest/extensions/blockhound/BlockHoundMode;
	public synthetic fun updateThreadContext (Lkotlin/coroutines/CoroutineContext;)Ljava/lang/Object;
}

public final class io/kotest/extensions/blockhound/BlockHound$ContextElement$Key : kotlin/coroutines/CoroutineContext$Key {
	public static final field INSTANCE Lio/kotest/extensions/blockhound/BlockHound$ContextElement$Key;
}

public final class io/kotest/extensions/blockhound/BlockHoundKt {
	public static final fun withBlockHoundMode (Lio/kotest/extensions/blockhound/BlockHoundMode;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/kotest/extensions/blockhound/BlockHoundMode : java/lang/Enum {
	public static final field DISABLED Lio/kotest/extensions/blockhound/BlockHoundMode;
	public static final field ERROR Lio/kotest/extensions/blockhound/BlockHoundMode;
	public static final field PRINT Lio/kotest/extensions/blockhound/BlockHoundMode;
	public static fun valueOf (Ljava/lang/String;)Lio/kotest/extensions/blockhound/BlockHoundMode;
	public static fun values ()[Lio/kotest/extensions/blockhound/BlockHoundMode;
}

public final class io/kotest/extensions/blockhound/KotestBlockHoundIntegration : reactor/blockhound/integration/BlockHoundIntegration {
	public fun <init> ()V
	public fun applyTo (Lreactor/blockhound/BlockHound$Builder;)V
}

