package io.kotest.property

import io.kotest.property.arbitrary.PropertyInput
import kotlin.random.Random

/**
 * Create a new [Gen] by keeping only instances of U generated by this gen.
 * This is useful if you have a type hierarchy and only want to retain
 * a particular subtype.
 */
@Suppress("UNCHECKED_CAST")
inline fun <T, reified U : T> Gen<T>.filterIsInstance(): Gen<U> = object : Gen<U> {
   override fun generate(random: Random): Sequence<PropertyInput<U>> =
      this@filterIsInstance.generate(random).filter { it.value is U }.map { it as PropertyInput<U> }
}

/**
 * Returns a new [Gen] that always includes null in the generated values.
 */
fun <T> Gen<T>.orNull(): Gen<T?> = object : Gen<T?> {
   override fun generate(random: Random): Sequence<PropertyInput<T?>> =
      sequenceOf(PropertyInput.invoke(null)) + this@orNull.generate(random)
}
