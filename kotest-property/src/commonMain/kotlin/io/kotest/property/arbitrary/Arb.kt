package io.kotest.property.arbitrary

import io.kotest.property.Gen
import io.kotest.property.GenValue
import io.kotest.property.Sample
import io.kotest.property.Shrinker
import io.kotest.property.ShrinkingMode
import io.kotest.property.sampleOf
import kotlin.random.Random

/**
 * An [Arb] (for arbitrary) is a provider of property test data in two categories: edgecases and samples.
 *
 * Edge cases are values that are a common source of bugs. For example, a function using ints is
 * more likely to fail for common edge cases like zero, minus 1, positive 1, [Int.MAX_VALUE] and [Int.MIN_VALUE]
 * rather than random values like 965489. Therefore, edge cases can be included in sequences
 * generated by an arbitrary.
 *
 * Not all arbitraries will utilize edge cases. For example, if you define an integer generator
 * using a subset of the number space - say from 100 to 250,000 - then no edge cases are provided.
 *
 * Samples are chosen randomly from the sample space and are used to give a greater breadth to
 * the test cases. For example, in the case of a function using integers, these random values
 * could be from across the entire integer number line, or could be limited to a subset of ints
 * such as natural numbers or even numbers.
 *
 * In order to use an [Arb] inside a property test, one must invoke the [take] method, passing in the
 * number of iterations required and optionally a [ShrinkingMode].
 */
interface Arb<A> {

   /**
    * Generates a single arbitrary value along with lazily produced reduced values (shrinks).
    */
   fun sample(random: Random): Sample<A>

   /**
    * Edgecase values for this type A.
    */
   fun edgecases(): List<A>

   /**
    * Returns a [Gen] that provides values using the samples and edgecases from this arb,
    * shrinking values using the given shrinking mode.
    */
   fun take(iterations: Int, mode: ShrinkingMode = ShrinkingMode.Bounded(1000)): Gen<A> = object : Gen<A> {
      override fun generate(random: Random): Sequence<GenValue<A>> {
         val edges = edgecases().asSequence().map { GenValue(it) }
         val samples = sequence {
            val sample = sample(random)
            val gv = GenValue(sample.value, sample.shrinks, mode)
            yield(gv)
         }.take(iterations)
         return edges + samples
      }
   }

   companion object
}

/**
 * Creates a new [Arb] that performs no shrinking, and generates each value
 * from successive invocations of the given function f.
 */
fun <A> arb(edgecases: List<A> = emptyList(), f: (Random) -> A) = object : Arb<A> {
   override fun sample(random: Random): Sample<A> = Sample(f(random))
   override fun edgecases(): List<A> = edgecases
}

/**
 * Creates a new [Arb] that performs shrinking using the supplied shrinker and generates each value
 * from successive invocations of the given function f.
 */
fun <A> arb(
   shrinker: Shrinker<A>,
   edgecases: List<A> = emptyList(),
   f: (Random) -> A
) = object : Arb<A> {
   override fun edgecases(): List<A> = edgecases
   override fun sample(random: Random): Sample<A> = sampleOf(f(random), shrinker)
}

/**
 * Returns a new [Arb] which takes its elements from the receiver and filters them using the supplied
 * predicate. This gen will continue to request elements from the underlying gen until one satisfies
 * the predicate.
 */
fun <A> Arb<A>.filter(predicate: (A) -> Boolean) = object : Arb<A> {
   override fun edgecases(): List<A> = this@filter.edgecases().filter(predicate)
   override fun sample(random: Random): Sample<A> {
      return sequence { yield(this@filter.sample(random)) }.filter { predicate(it.value) }.first()
   }
}

/**
 * Returns a new [Arb] which takes its elements from the receiver and maps them using the supplied function.
 */
fun <A, B> Arb<A>.map(f: (A) -> B): Arb<B> = object : Arb<B> {
   override fun edgecases(): List<B> = this@map.edgecases().map(f)
   override fun sample(random: Random): Sample<B> {
      val (a, shrinksA) = this@map.sample(random)
      val b = f(a)
      val shrinksB = lazy { shrinksA.value.map(f) }
      return Sample(b, shrinksB)
   }
}
