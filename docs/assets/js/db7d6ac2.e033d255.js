"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[1295],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(i,".").concat(m)]||c[m]||u[m]||r;return n?o.createElement(f,s(s({ref:t},d),{},{components:n})):o.createElement(f,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},47464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={id:"soft_assertions",title:"Soft Assertions",slug:"soft-assertions.html"},s=void 0,l={unversionedId:"assertions/soft_assertions",id:"assertions/soft_assertions",title:"Soft Assertions",description:"Normally, assertions like shouldBe throw an exception when they fail.",source:"@site/docs/assertions/soft_assertions.md",sourceDirName:"assertions",slug:"/assertions/soft-assertions.html",permalink:"/docs/next/assertions/soft-assertions.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/soft_assertions.md",tags:[],version:"current",frontMatter:{id:"soft_assertions",title:"Soft Assertions",slug:"soft-assertions.html"},sidebar:"assertions",previous:{title:"Clues",permalink:"/docs/next/assertions/clues.html"},next:{title:"Power Assert",permalink:"/docs/next/assertions/power-assert"}},i={},p=[],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Normally, assertions like ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldBe")," throw an exception when they fail.\nBut sometimes you want to perform multiple assertions in a test, and\nwould like to see all of the assertions that failed. Kotest provides\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly")," function for this purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"assertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n")),(0,a.kt)("p",null,"If any assertions inside the block failed, the test will continue to\nrun. All failures will be reported in a single exception at the end of\nthe block."),(0,a.kt)("p",null,"Another version of ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly")," takes a test target and lambda with test target as its receiver."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'assertSoftly(foo) {\n    shouldNotEndWith("b")\n    length shouldBe 3\n}\n')),(0,a.kt)("p",null,"We can configure assert softly to be implicitly added to every test via ",(0,a.kt)("a",{parentName:"p",href:"/docs/next/framework/project-config.html"},"project config"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," only Kotest's own assertions can be asserted softly. To be compatible with ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly"),", assertions from other libraries must be wrapped in ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldNotThrowAny"),", which is described later in this section. If any other checks fail and throw an ",(0,a.kt)("inlineCode",{parentName:"p"},"AssertionError"),", it will not respect ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly")," and bubble up, erasing the results of previous assertions. This includes Kotest's own ",(0,a.kt)("inlineCode",{parentName:"p"},"fail()")," function, so when the following code runs, we won't know if the first assertion ",(0,a.kt)("inlineCode",{parentName:"p"},"foo shouldBe bar")," succeeded or failed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'assertSoftly {\n  foo shouldBe bar\n  fail("Something happened")\n}\n')),(0,a.kt)("p",null,"Note, however, that ",(0,a.kt)("inlineCode",{parentName:"p"},"failSoftly")," is compatible with ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly"),", so the following code will report both failures:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'assertSoftly {\n  2*2 shouldBe 5\n  failSoftly("Something happened")\n}\n')),(0,a.kt)("p",null,"Likewise, if ",(0,a.kt)("inlineCode",{parentName:"p"},"mockk"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"verify(...)")," fails in the following example, the second assertion will not execute:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"assertSoftly {\n  verify(exactly = 1) { myClass.myMethod(any()) }\n  foo shouldBe bar\n}\n")),(0,a.kt)("p",null,"So if we want to invoke non-kotest assertions inside ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly")," blocks, they need to be invoked via ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldPass"),".\nIn the following example both ",(0,a.kt)("inlineCode",{parentName:"p"},"verify")," and the second assertion can fail, and we shall get both errors accumulated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"assertSoftly {\n  shouldNotThrowAnyUnit {\n    verify(exactly = 1) { myClass.myMethod(any()) }\n  }\n  foo shouldBe bar\n}\n")),(0,a.kt)("p",null,"Likewise, in the following example the failure of ",(0,a.kt)("inlineCode",{parentName:"p"},"verify")," will not be ignored, it will be added along with the failure of the first assertion:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"assertSoftly {\n  (2+2) shouldBe 5\n  shouldNotThrowAnyUnit {\n    verify(exactly = 1) { myClass.myMethod(any()) }\n  }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," by design, some of Kotest's own assertions are not compatible with ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly"),", including:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldCompleteWithin")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldCompleteBetween")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldNotThrowExactly")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldNotThrowMessage")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldThrow")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldThrowExactly")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldThrowExactlyUnit")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldThrowMessage")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldThrowUnit")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldThrowUnitWithMessage")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldThrowWithMessage")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldTimeout"))),(0,a.kt)("p",null,"But ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldThrowSoftly")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldNotThrowExactlyUnit")," are compatible with ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSoftly"),"."))}u.isMDXComponent=!0}}]);