"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[36950],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>h});var a=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var s=a.createContext({}),d=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=d(t.components);return a.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,s=t.parentName,c=i(t,["components","mdxType","originalType","parentName"]),p=d(n),h=l,u=p["".concat(s,".").concat(h)]||p[h]||m[h]||r;return n?a.createElement(u,o(o({ref:e},c),{},{components:n})):a.createElement(u,o({ref:e},c))}));function h(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:l,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},59354:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(87462),l=(n(67294),n(3905));const r={id:"collections",title:"Collection Matchers",slug:"collection-matchers.html",sidebar_label:"Collections"},o=void 0,i={unversionedId:"assertions/collections",id:"version-5.6.x/assertions/collections",title:"Collection Matchers",description:"This page describes the rich assertions (matchers) that are available for Collection, Iterable and Array types.",source:"@site/versioned_docs/version-5.6.x/assertions/collections.md",sourceDirName:"assertions",slug:"/assertions/collection-matchers.html",permalink:"/docs/5.6.x/assertions/collection-matchers.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/collections.md",tags:[],version:"5.6.x",frontMatter:{id:"collections",title:"Collection Matchers",slug:"collection-matchers.html",sidebar_label:"Collections"},sidebar:"assertions",previous:{title:"Core",permalink:"/docs/5.6.x/assertions/core-matchers.html"},next:{title:"Overview",permalink:"/docs/5.6.x/assertions/json/json-overview.html"}},s={},d=[],c={toc:d};function m(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This page describes the rich assertions (matchers) that are available for Collection, Iterable and Array types."),(0,l.kt)("p",null,"Also, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/5.6.x/assertions/inspectors.html"},"inspectors")," which are useful ways to test multiple elements in a collection."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Collections"),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeEmpty()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collections has zero elements.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeUnique()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that all the elements of the collection are distinct using the natural equals of the elements.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeUnique(comparator)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that all the elements of the collection are distinct by comparing elements using the given ",(0,l.kt)("inlineCode",{parentName:"td"},"comparator"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContain(element)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains the given element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainAll(e1, e2, ..., en)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains all the elements listed, where order is not important. Ie, element 2 can be in the collection before element 1.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainDuplicates()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains at least one duplicate element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainExactly(e1, e2, ..., en)")),(0,l.kt)("td",{parentName:"tr",align:null},"Assert that a collection contains exactly the given elements and nothing else, in order.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainExactlyInAnyOrder(e1, e2, ..., en)")),(0,l.kt)("td",{parentName:"tr",align:null},"Assert that a collection contains exactly the given elements and nothing else, in ",(0,l.kt)("em",{parentName:"td"},"any")," order.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainAllInAnyOrder(e1, e2, ..., en)")),(0,l.kt)("td",{parentName:"tr",align:null},"Assert that a collection contains all the given elements, in ",(0,l.kt)("em",{parentName:"td"},"any")," order.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainNoNulls()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains no null elements, or is empty.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainNull()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains at least one null element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainOnlyNulls()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains only null elements, or is empty.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainAllIgnoringFields()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains all the elements listed ignoring one or more fields.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveSingleElement(element)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection only contains a single element and that that element is the given one.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveSingleElement { block }")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains a single element by a given predicate.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveSize(length)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection is exactly the given length.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSingleton()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains only one element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSingleton { block }")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection only one element, and then, runs the block with this element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveLowerBound(element)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the given element is smaller or equal to every element of the collection. Works only for elements that implement Comparable.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveUpperBound(element)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the given element is larger or equal to every element of the collection. Works only for elements that implement Comparable.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSmallerThan(col)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection is smaller than the other collection.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeLargerThan(col)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection is larger than the other collection.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSameSizeAs(col)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has the same size as the other collection.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveAtLeastSize(n)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has at least size n.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveAtMostSize(n)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has at most size n.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list.shouldBeSorted()")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the list is sorted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list.shouldBeSortedBy { transform }")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the list is sorted by the value after applying the transform.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list.shouldContainInOrder(other)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that this list contains the given list in order. Other elements may appear either side of the given list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list.shouldExistInOrder({ element }, ...)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that this list contains elements matching the predicates in order. Other elements may appear around or between the elements matching the predicates.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list.shouldHaveElementAt(index, element)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that this list contains the given element at the given position.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list.shouldStartWith(lst)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that this list starts with the elements of the given list, in order.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list.shouldEndWith(lst)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that this list ends with the elements of the given list, in order.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"iterable.shouldMatchEach(assertions)")),(0,l.kt)("td",{parentName:"tr",align:null},"Iterates over this list and the assertions and asserts that each element of this list passes the associated assertion. Fails if size of the collections mismatch.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"iterable.shouldMatchInOrder(assertions)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that there is a subsequence of this iterator that matches the assertions in order, with no gaps allowed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"iterable.shouldMatchInOrderSubset(assertions)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that there is a subsequence (possibly with gaps) that matches the assertions in order.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"value.shouldBeOneOf(collection)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that a specific instance is contained in a collection.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.shouldContainAnyOf(collection)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has at least one of the elements in ",(0,l.kt)("inlineCode",{parentName:"td"},"collection"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"value.shouldBeIn(collection)")),(0,l.kt)("td",{parentName:"tr",align:null},"Asserts that an object is contained in collection, checking by value and not by reference.")))))}m.isMDXComponent=!0}}]);