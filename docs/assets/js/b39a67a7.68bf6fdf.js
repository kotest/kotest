"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[5161],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},63661:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={title:"Project Level Config",slug:"project-config.html"},i=void 0,s={unversionedId:"framework/project_config",id:"framework/project_config",title:"Project Level Config",description:"This document describes project-level configuration in Kotest 6.0.",source:"@site/docs/framework/project_config.md",sourceDirName:"framework",slug:"/framework/project-config.html",permalink:"/docs/next/framework/project-config.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/project_config.md",tags:[],version:"current",frontMatter:{title:"Project Level Config",slug:"project-config.html"},sidebar:"framework",previous:{title:"Test Case Config",permalink:"/docs/next/framework/testcaseconfig.html"},next:{title:"Package Level Config",permalink:"/docs/next/framework/package-level-config.html"}},l={},c=[{value:"Setup",id:"setup",level:2},{value:"Examples",id:"examples",level:2},{value:"Assertion Mode",id:"assertion-mode",level:3},{value:"Global Assert Softly",id:"global-assert-softly",level:3},{value:"Timeouts",id:"timeouts",level:3},{value:"Duplicate Test Name Handling",id:"duplicate-test-name-handling",level:3},{value:"Fail On Ignored Tests",id:"fail-on-ignored-tests",level:3},{value:"Ordering",id:"ordering",level:3},{value:"Test Ordering",id:"test-ordering",level:4},{value:"Spec Ordering",id:"spec-ordering",level:4},{value:"Test Naming",id:"test-naming",level:3},{value:"Test Case",id:"test-case",level:4},{value:"Test Name Tags",id:"test-name-tags",level:4},{value:"Test name whitespace",id:"test-name-whitespace",level:4},{value:"Coroutine Dispatcher Factory",id:"coroutine-dispatcher-factory",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"This document describes project-level configuration in Kotest 6.0.\nIf you were using project-level configuration in Kotest 5.x, note that the location of the project config instance must\nnow be specified, otherwise it will not be picked up by the framework.")),(0,o.kt)("p",null,"Kotest is flexible and has many ways to configure tests, such as configuring the order of tests inside a spec, or how\ntest classes are created. Sometimes you may want to set this at a global level and for that you need to use\nproject-level-config."),(0,o.kt)("p",null,"Project wide configuration can be used by creating a class that extends from ",(0,o.kt)("inlineCode",{parentName:"p"},"AbstractProjectConfig"),".\nOn the JVM and JS platforms, an object is also supported if you prefer using an object to a class."),(0,o.kt)("p",null,"Any configuration set at the spec level or directly on a test will override config specified at the project level. Some\nconfiguration options are only available at the project level because they change how the test engine runs the entire\ntest suite (eg spec concurrency settings)."),(0,o.kt)("p",null,"Some configuration options available in ",(0,o.kt)("inlineCode",{parentName:"p"},"AbstractProjectConfig")," include assertions modes, timeouts, failing specs with\nignored tests, global ",(0,o.kt)("inlineCode",{parentName:"p"},"AssertSoftly"),", and reusable listeners or extensions and so on."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"On the JVM, Kotest will inspect the classpath for a class with a specified name and package that extends ",(0,o.kt)("inlineCode",{parentName:"p"},"AbstractProjectConfig"),".\nBy default, this class should be named ",(0,o.kt)("inlineCode",{parentName:"p"},"io.kotest.provided.ProjectConfig"),". If you don't want to place your class in that\nparticular package, you can specify a different name using the system property ",(0,o.kt)("inlineCode",{parentName:"p"},"kotest.framework.config.fqn"),"."),(0,o.kt)("p",null,"For example, in gradle, you would configure something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'tests.task {\n  useJunitPlatform()\n  systemProperty("kotest.framework.config.fqn", "com.sksamuel.mypackage.WibbleConfig")\n}\n')),(0,o.kt)("p",null,"On native and JS platforms, the config class can be located anywhere but must still extend ",(0,o.kt)("inlineCode",{parentName:"p"},"AbstractProjectConfig"),"."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You should only create a single project config class, otherwise the behavior is undefined.\nIf you want to have different configurations per package, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/framework/package-level-config.html"},"package level config"),".")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"assertion-mode"},"Assertion Mode"),(0,o.kt)("p",null,"You can ask Kotest to fail the build, or warn in std err, if a test is executed that does not use a Kotest assertion."),(0,o.kt)("p",null,"To do this, set ",(0,o.kt)("inlineCode",{parentName:"p"},"assertionMode")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"AssertionMode.Error")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"AssertionMode.Warn")," inside your config. For example.\nAn alternative way to enable this is the system property ",(0,o.kt)("inlineCode",{parentName:"p"},"kotest.framework.assertion.mode")," which will always (if\ndefined) take priority over the value here."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"object KotestProjectConfig : AbstractProjectConfig() {\n  override val assertionMode = AssertionMode.Error\n}\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Assertion mode only works for Kotest assertions and not other assertion libraries. This is because the assertions need\nto be aware of the assertion detection framework that Kotest provides.")),(0,o.kt)("h3",{id:"global-assert-softly"},"Global Assert Softly"),(0,o.kt)("p",null,"Assert softly is very useful to batch up errors into a single failure. If we want to enable this for every test\nautomatically, we can do this in a config.\nAn alternative way to enable this is by setting system property ",(0,o.kt)("inlineCode",{parentName:"p"},"kotest.framework.assertion.globalassertsoftly")," to\n",(0,o.kt)("inlineCode",{parentName:"p"},"true")," which will always (if defined) take priority over the value here."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"object KotestProjectConfig : AbstractProjectConfig() {\n  override val globalAssertSoftly = true\n}\n")),(0,o.kt)("h3",{id:"timeouts"},"Timeouts"),(0,o.kt)("p",null,"You can set a default timeout for all tests in your project by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"timeout")," property in your project config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"object KotestProjectConfig : AbstractProjectConfig() {\n  override val timeout = 5.seconds\n}\n")),(0,o.kt)("h3",{id:"duplicate-test-name-handling"},"Duplicate Test Name Handling"),(0,o.kt)("p",null,"By default, Kotest will rename a test if it has the same name as another test in the same scope. It will append _1, _2\nand so on to the test name. This is useful for automatically generated tests."),(0,o.kt)("p",null,"You can change this behavior globally by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"duplicateTestNameMode")," to either ",(0,o.kt)("inlineCode",{parentName:"p"},"DuplicateTestNameMode.Error")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"DuplicateTestNameMode.Warn"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Error")," will fail the test suite on a repeated name, and warn will rename but output a warning."),(0,o.kt)("h3",{id:"fail-on-ignored-tests"},"Fail On Ignored Tests"),(0,o.kt)("p",null,"You may wish to consider an ignored test as a failure.\nTo enable this feature, set ",(0,o.kt)("inlineCode",{parentName:"p"},"failOnIgnoredTests")," to true inside your project config. For example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"object KotestProjectConfig : AbstractProjectConfig() {\n  override val failOnIgnoredTests = true\n}\n")),(0,o.kt)("h3",{id:"ordering"},"Ordering"),(0,o.kt)("p",null,"Kotest supports ordering both specs and tests independently."),(0,o.kt)("h4",{id:"test-ordering"},"Test Ordering"),(0,o.kt)("p",null,"When running multiple tests from a Spec, there's a certain order on how to execute them."),(0,o.kt)("p",null,"By default, a sequential order is used (the order that tests are defined in the spec), but this can be changed. For\navailable options see ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/framework/test-ordering.html"},"test ordering"),"."),(0,o.kt)("h4",{id:"spec-ordering"},"Spec Ordering"),(0,o.kt)("p",null,"By default, the ordering of Spec classes is not defined. This is often sufficient, when we have no preference, but if we\nneed control over the execution order of specs, we can use ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/framework/spec-ordering.html"},"spec ordering"),"."),(0,o.kt)("h3",{id:"test-naming"},"Test Naming"),(0,o.kt)("p",null,"Test names can be adjusted in several ways."),(0,o.kt)("h4",{id:"test-case"},"Test Case"),(0,o.kt)("p",null,"Test names case can be controlled by changing the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"testNameCase"),"."),(0,o.kt)("p",null,"By default, the value is ",(0,o.kt)("inlineCode",{parentName:"p"},"TestNameCase.AsIs")," which makes no change."),(0,o.kt)("p",null,"By setting the value to ",(0,o.kt)("inlineCode",{parentName:"p"},"TestNameCase.Lowercase")," a test's name will be lowercase in output."),(0,o.kt)("p",null,"If you are using a spec that adds in prefixes to the test names (should as WordSpec or BehaviorSpec) then the\nvalues ",(0,o.kt)("inlineCode",{parentName:"p"},"TestNameCase.Sentence")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TestNameCase.InitialLowercase")," can be useful."),(0,o.kt)("h4",{id:"test-name-tags"},"Test Name Tags"),(0,o.kt)("p",null,"Another using test name option is ",(0,o.kt)("inlineCode",{parentName:"p"},"testNameAppendTags")," which, when set to true, will include any applicable tags in the\ntest name.\nFor example, if a test ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," was defined in a spec with the tags ",(0,o.kt)("inlineCode",{parentName:"p"},"linux")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"spark")," then the test name would be\nadjusted\nto be ",(0,o.kt)("inlineCode",{parentName:"p"},"foo [linux, spark]")),(0,o.kt)("p",null,"This setting can also be set using a system property or environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"kotest.framework.testname.append.tags")," to\n",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("h4",{id:"test-name-whitespace"},"Test name whitespace"),(0,o.kt)("p",null,"If you define test names over several lines then ",(0,o.kt)("inlineCode",{parentName:"p"},"removeTestNameWhitespace")," can be useful. Take this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'"""this is\n   my test case""" {\n  // test here\n}\n')),(0,o.kt)("p",null,"Then the test name in output will be ",(0,o.kt)("inlineCode",{parentName:"p"},"this is _ _ _  my test case")," (note: the underscores are added for emphasis). By setting ",(0,o.kt)("inlineCode",{parentName:"p"},"removeTestNameWhitespace")," to true,\nthen this name will be trimmed to ",(0,o.kt)("inlineCode",{parentName:"p"},"this is my test case"),"."),(0,o.kt)("p",null,"An alternative way to enable this is by setting system property ",(0,o.kt)("inlineCode",{parentName:"p"},"kotest.framework.testname.multiline")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," which\nwill always (if defined) take priority over the value here."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"object KotestProjectConfig : AbstractProjectConfig() {\n  override val testNameRemoveWhitespace = true\n}\n")),(0,o.kt)("h3",{id:"coroutine-dispatcher-factory"},"Coroutine Dispatcher Factory"),(0,o.kt)("p",null,"You can specify a custom coroutine dispatcher factory to control how coroutines are executed in your tests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"object KotestProjectConfig : AbstractProjectConfig() {\n  override val coroutineDispatcherFactory = ThreadPerSpecCoroutineContextFactory\n}\n")),(0,o.kt)("p",null,"For more details on this feature, see the ",(0,o.kt)("a",{parentName:"p",href:"concurrency6.html#coroutine-dispatcher-factory"},"concurrency documentation"),"."))}d.isMDXComponent=!0}}]);