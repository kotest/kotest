"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[31601],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,m=f["".concat(p,".").concat(d)]||f[d]||c[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},29942:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={id:"proptestconfig",title:"Configuration",slug:"property-test-config.html"},i=void 0,s={unversionedId:"proptest/proptestconfig",id:"proptest/proptestconfig",title:"Configuration",description:"Kotest provides for the  ability to specify some configuration options when running a property test. We do this by passing",source:"@site/docs/proptest/config.md",sourceDirName:"proptest",slug:"/proptest/property-test-config.html",permalink:"/docs/next/proptest/property-test-config.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/config.md",tags:[],version:"current",frontMatter:{id:"proptestconfig",title:"Configuration",slug:"property-test-config.html"},sidebar:"proptest",previous:{title:"Seeds",permalink:"/docs/next/proptest/property-test-seeds.html"},next:{title:"Custom Generators",permalink:"/docs/next/proptest/custom-generators.html"}},p={},l=[{value:"Seed",id:"seed",level:3},{value:"Min Failure",id:"min-failure",level:3},{value:"PropTestListener",id:"proptestlistener",level:3},{value:"Handling Unprintable Characters in Failure Messages",id:"handling-unprintable-characters-in-failure-messages",level:3}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Kotest provides for the  ability to specify some configuration options when running a property test. We do this by passing\nin an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"PropTestConfig")," to the test methods."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class PropertyExample: StringSpec({\n   "String size" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n')),(0,o.kt)("h3",{id:"seed"},"Seed"),(0,o.kt)("p",null,"A commonly used configuration option is specifying the seed used by the random source. This is used when you want to\nrepeat the same values each time the test is run. You might want to do this if you find a test failure,\nand you want to ensure that that particular set of values continues to be executed in the future as a regression\ntest."),(0,o.kt)("p",null,"For full details on how the seed is used ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/proptest/property-test-seeds.html"},"click here"),"."),(0,o.kt)("h3",{id:"min-failure"},"Min Failure"),(0,o.kt)("p",null,"By default, Kotest tolerates no failure. Perhaps you want to run some non-deterministic test a bunch of times, and you're happy\nto accept some small number of failures. You can specify that in config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class PropertyExample: StringSpec({\n   "some flakey test" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n')),(0,o.kt)("h3",{id:"proptestlistener"},"PropTestListener"),(0,o.kt)("p",null,"Sometimes in property test it is required to perform some setup and tear down in each iteration of test.\nFor this purpose you can register a ",(0,o.kt)("inlineCode",{parentName:"p"},"PropTestListener")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"PropTestConfig"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class PropertyExample: StringSpec({\n   "some property test which require setup and tear down in each iteration" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n')),(0,o.kt)("h3",{id:"handling-unprintable-characters-in-failure-messages"},"Handling Unprintable Characters in Failure Messages"),(0,o.kt)("p",null,"When property tests involve strings with unprintable characters, failure messages can be hard to read and debug.\nBy setting ",(0,o.kt)("inlineCode",{parentName:"p"},"outputHexForUnprintableChars")," to true in ",(0,o.kt)("inlineCode",{parentName:"p"},"PropTestConfig"),",\nunprintable characters in failure messages are displayed as their Unicode code points in the format ",(0,o.kt)("inlineCode",{parentName:"p"},"U+XXXX"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class PropertyExample : StringSpec({\n    "handle unprintable characters in failure messages" {\n        forAll<String>(\n            PropTestConfig(outputHexForUnprintableChars = true)\n        ) { str ->\n            // some assertion\n        }\n    }\n})\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default Value"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"outputHexForUnprintableChars")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,o.kt)("p",null,"Alternatively, you can set this option as a common project-wide setting\nin a ",(0,o.kt)("inlineCode",{parentName:"p"},"kotest.properties")," file located in your classpath:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties"},"kotest.proptest.arb.string.output-hex-for-unprintable-chars=true\n")))}c.isMDXComponent=!0}}]);