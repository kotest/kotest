"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[58707],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"Matching JSON content",slug:"content-json-matchers.html",sidebar_label:"Matching content"},l=void 0,i={unversionedId:"assertions/json/content",id:"assertions/json/content",title:"Matching JSON content",description:"This module is available for all targets.",source:"@site/docs/assertions/json/content.md",sourceDirName:"assertions/json",slug:"/assertions/json/content-json-matchers.html",permalink:"/docs/next/assertions/json/content-json-matchers.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/content.md",tags:[],version:"current",frontMatter:{title:"Matching JSON content",slug:"content-json-matchers.html",sidebar_label:"Matching content"},sidebar:"assertions",previous:{title:"Overview",permalink:"/docs/next/assertions/json/json-overview.html"},next:{title:"Schema matchers",permalink:"/docs/next/assertions/json/json-schema-matchers.html"}},s={},p=[{value:"shouldEqualJson",id:"shouldequaljson",level:2},{value:"compareJsonOptions",id:"comparejsonoptions",level:3},{value:"Usage:",id:"usage",level:4},{value:"Parameters",id:"parameters",level:4},{value:"shouldEqualSpecifiedJson",id:"shouldequalspecifiedjson",level:2},{value:"shouldEqualSpecifiedJsonIgnoringOrder",id:"shouldequalspecifiedjsonignoringorder",level:2},{value:"shouldBeEmptyJsonArray",id:"shouldbeemptyjsonarray",level:2},{value:"shouldBeEmptyJsonObject",id:"shouldbeemptyjsonobject",level:2},{value:"shouldBeJsonArray",id:"shouldbejsonarray",level:2},{value:"shouldBeJsonObject",id:"shouldbejsonobject",level:2},{value:"shouldBeValidJson",id:"shouldbevalidjson",level:2},{value:"shouldContainJsonKey",id:"shouldcontainjsonkey",level:2},{value:"shouldContainJsonKeyValue",id:"shouldcontainjsonkeyvalue",level:2},{value:"shouldMatchJsonResource",id:"shouldmatchjsonresource",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This module is available for all targets."),(0,r.kt)("h2",{id:"shouldequaljson"},"shouldEqualJson"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"json.shouldEqualJson(other)")," asserts that the left-hand side represents the same\nJSON structure as the right-hand side."),(0,r.kt)("p",null,"The matcher allows for different formatting, and for different order of keys."),(0,r.kt)("p",null,"For example, the following two JSON strings would be considered equal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name":     "sam",\n  "location": "chicago",\n  "age":      41\n}\n')),(0,r.kt)("p",null,"and"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "age": 41, "name": "sam", "location": "chicago" }\n')),(0,r.kt)("p",null,"The inverse of this matcher is ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldNotEqualJson")," which will error if two JSON strings ",(0,r.kt)("em",{parentName:"p"},"are")," considered equal."),(0,r.kt)("h3",{id:"comparejsonoptions"},"compareJsonOptions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"shouldEqualJson")," supports an additional parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"CompareJsonOptions")," which supports the following flags to\ntoggle behaviour of the JSON comparison:"),(0,r.kt)("h4",{id:"usage"},"Usage:"),(0,r.kt)("p",null,"Options can be specified inline, like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"a.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n")),(0,r.kt)("p",null,"Another option is to define a compare function which suits your desires, like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val myOptions = compareJsonOptions {\n  typeCoercion = TypeCoercion.Enabled\n  arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n"[1, 2]" lenientShouldEqualJson "[2, 1]" // This will pass\n')),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Purpose"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible values"),(0,r.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PropertyOrder")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines if the order of properties in JSON objects are considered when comparing"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PropertyOrder.Strict"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"PropertyOrder.Lenient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PropertyOrder.Lenient"),", i.e. order of properties ",(0,r.kt)("em",{parentName:"td"},"DON'T")," matter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ArrayOrder")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines if the order of elements in JSON arrays are considered when comparing"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ArrayOrder.Strict"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ArrayOrder.Lenient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ArrayOrder.Strict"),", i.e. order of elements ",(0,r.kt)("em",{parentName:"td"},"DO")," matter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FieldComparison")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines if comparison will fail if JSON objects ",(0,r.kt)("inlineCode",{parentName:"td"},"actual")," contain extra properties, when compared to ",(0,r.kt)("inlineCode",{parentName:"td"},"expected")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FieldComparison.Strict"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"FieldComparison.Lenient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FieldComparison.Strict"),", i.e. extra properties will cause inequality")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NumberFormat")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines if comparison of numbers are strict with regards to number format. For instance, if 100.0 and 100 are considered equal."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NumberFormat.Strict"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"NumberFormat.Lenient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NumberFormat.Lenient"),", i.e. number formats ",(0,r.kt)("em",{parentName:"td"},"DON'T")," matter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TypeCoercion")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines if types will try to be coerced, for instance when a string contains a number or boolean value"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TypeCoercion.Enabled"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"TypeCoercion.Disabled")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TypeCoercion.Disabled"),", i.e. types will ",(0,r.kt)("em",{parentName:"td"},"NOT")," be coerced")))),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldequalspecifiedjson"},"shouldEqualSpecifiedJson"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldEqualJson"),", with default options except ",(0,r.kt)("inlineCode",{parentName:"p"},"FieldComparison")," which is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"FieldComparison.Lenient"),"\ninstead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val a = """ { "a": true, "date": "2019-11-03" } """\nval b = """ { "a": true } """\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n')),(0,r.kt)("p",null,"The inverse of this matcher is ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldNotEqualSpecifiedJson")," which will error if two JSON strings ",(0,r.kt)("em",{parentName:"p"},"are")," considered\nequal."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldequalspecifiedjsonignoringorder"},"shouldEqualSpecifiedJsonIgnoringOrder"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldEqualJson"),", with default options except"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FieldComparison")," which is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"FieldComparison.Lenient")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ArrayOrder")," which is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"ArrayOrder.Lenient"))),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldbeemptyjsonarray"},"shouldBeEmptyJsonArray"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"json.shouldBeEmptyJsonArray()")," asserts that the JSON is an empty array (",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),")."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldbeemptyjsonobject"},"shouldBeEmptyJsonObject"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"json.shouldBeEmptyJsonObject()")," asserts that the JSON is an empty array (",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),")."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldbejsonarray"},"shouldBeJsonArray"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"json.shouldBeJsonArray()")," asserts that the JSON is an array."),(0,r.kt)("p",null,"The inverse of this matcher is ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldNotBeJsonArray")," which will error if the JSON string ",(0,r.kt)("em",{parentName:"p"},"is")," an array."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldbejsonobject"},"shouldBeJsonObject"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"json.shouldBeJsonObject()")," asserts that the JSON is an object."),(0,r.kt)("p",null,"The inverse of this matcher is ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldNotBeJsonObject")," which will error if the JSON string ",(0,r.kt)("em",{parentName:"p"},"is")," an object."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldbevalidjson"},"shouldBeValidJson"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"json.shouldBeValidJson()")," asserts that the string is valid JSON."),(0,r.kt)("p",null,"The inverse of this matcher is ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldNotBeValidJson")," which will error if the string ",(0,r.kt)("em",{parentName:"p"},"is")," valid JSON."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"Multiplatform")),(0,r.kt)("h2",{id:"shouldcontainjsonkey"},"shouldContainJsonKey"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'json.shouldContainJsonKey("$.json.path")')," asserts that a JSON string contains the given JSON path."),(0,r.kt)("p",null,"The inverse of this matcher is ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldNotContainJsonKey")," which will error if a JSON string ",(0,r.kt)("em",{parentName:"p"},"does")," contain the given JSON\npath."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"JVM")),(0,r.kt)("h2",{id:"shouldcontainjsonkeyvalue"},"shouldContainJsonKeyValue"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'str.shouldContainJsonKeyValue("$.json.path", value)')," asserts that a JSON string contains a JSON path with a specific\n",(0,r.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,r.kt)("p",null,"The inverse of this matcher is ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldNotContainJsonKeyValue")," which will error if a JSON string ",(0,r.kt)("em",{parentName:"p"},"does")," contain the given\nvalue at the given JSON path."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"JVM")),(0,r.kt)("h2",{id:"shouldmatchjsonresource"},"shouldMatchJsonResource"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'json.shouldMatchJsonResource("/file.json")')," asserts that the JSON is equal to the existing test resource ",(0,r.kt)("inlineCode",{parentName:"p"},"/file.json"),",\nignoring properties' order and formatting."),(0,r.kt)("p",null,"Targets: ",(0,r.kt)("strong",{parentName:"p"},"JVM")))}u.isMDXComponent=!0}}]);