"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[97997],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(a),m=r,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||s;return a?n.createElement(h,o(o({ref:t},u),{},{components:a})):n.createElement(h,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var i=2;i<s;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},63171:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const s={id:"data_class_matchers",title:"Data Class Matchers",slug:"data-class-matchers.html",sidebar_label:"Data Class Matchers"},o=void 0,l={unversionedId:"assertions/data_class_matchers",id:"version-5.6.x/assertions/data_class_matchers",title:"Data Class Matchers",description:"Matchers for data classes can be created by composing one or more other matchers along with the property to extract to",source:"@site/versioned_docs/version-5.6.x/assertions/data_class_matchers.md",sourceDirName:"assertions",slug:"/assertions/data-class-matchers.html",permalink:"/docs/5.6.x/assertions/data-class-matchers.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/data_class_matchers.md",tags:[],version:"5.6.x",frontMatter:{id:"data_class_matchers",title:"Data Class Matchers",slug:"data-class-matchers.html",sidebar_label:"Data Class Matchers"},sidebar:"assertions",previous:{title:"Custom Matchers",permalink:"/docs/5.6.x/assertions/custom-matchers.html"},next:{title:"Exceptions",permalink:"/docs/5.6.x/assertions/exceptions.html"}},c={},i=[],u={toc:i};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Matchers for data classes can be created by composing one or more other matchers along with the property to extract to\ntest against. This allows us to build up complicated matchers from simpler ones."),(0,r.kt)("p",null,"For example, say we had the following structures:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n")),(0,r.kt)("p",null,"And our goal is to have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," matcher that checks for people in Warsaw. We can define matchers for each of those\ncomponents like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { "Name $value should be $name" },\n    { "Name $value should not be $name" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { "Age $value should be $age" },\n    { "Age $value should not be $age" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address("Warsaw", "Test", "1/1"),\n    { "Address $value should be Test 1/1 Warsaw" },\n    { "Address $value should not be Test 1/1 Warsaw" }\n  )\n}\n')),(0,r.kt)("p",null,"Now we can simply combine these together to make a John in Warsaw matcher. Notice that we specify the property to\nextract to pass to each matcher in turn."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun personMatcher(name: String, age: Int) = Matcher.compose(\n  nameMatcher(name) to Person::name,\n  ageMatcher(age) to Person::age,\n  addressMatcher to Person::address\n)\n")),(0,r.kt)("p",null,"And we could add the extension variant too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n")),(0,r.kt)("p",null,"Then we invoke like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'Person("John", 21, Address("Warsaw", "Test", "1/1")).shouldBePerson("John", 21)\nPerson("Sam", 22, Address("Chicago", "Test", "1/1")).shouldBePerson("John", 21) // would fail\n')))}d.isMDXComponent=!0}}]);