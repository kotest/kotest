"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[6313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var s=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=s.createContext({}),m=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return s.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=m(n),d=o,y=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return n?s.createElement(y,i(i({ref:t},p),{},{components:n})):s.createElement(y,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var m=2;m<r;m++)i[m]=n[m];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>m});var s=n(87462),o=(n(67294),n(3905));const r={id:"system_extensions",title:"System Extensions",sidebar_label:"System Extensions",slug:"system_extensions.html"},i=void 0,a={unversionedId:"extensions/system_extensions",id:"version-6.0/extensions/system_extensions",title:"System Extensions",description:"System Extensions",source:"@site/versioned_docs/version-6.0/extensions/system.md",sourceDirName:"extensions",slug:"/extensions/system_extensions.html",permalink:"/docs/extensions/system_extensions.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-6.0/extensions/system.md",tags:[],version:"6.0",frontMatter:{id:"system_extensions",title:"System Extensions",sidebar_label:"System Extensions",slug:"system_extensions.html"},sidebar:"extensions",previous:{title:"Spring",permalink:"/docs/extensions/spring.html"},next:{title:"Testcontainers",permalink:"/docs/extensions/test_containers.html"}},l={},m=[{value:"System Extensions",id:"system-extensions",level:2},{value:"System Property Extension",id:"system-property-extension",level:3},{value:"No-stdout / no-stderr listeners",id:"no-stdout--no-stderr-listeners",level:3},{value:"Locale/Timezone listeners",id:"localetimezone-listeners",level:3}],p={toc:m};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"system-extensions"},"System Extensions"),(0,o.kt)("p",null,"If you need to test code that uses ",(0,o.kt)("inlineCode",{parentName:"p"},"java.lang.System"),", Kotest provides extensions that can alter the system and restore it after each test.\nThis extension is only available on the JVM."),(0,o.kt)("p",null,"To use this extension, add the dependency to your project:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://central.sonatype.com/artifact/io.kotest/kotest-extensions-jvm"},(0,o.kt)("img",{src:"https://img.shields.io/maven-central/v/io.kotest/kotest-extensions-jvm.svg?label=latest%20release"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://central.sonatype.com/repository/maven-snapshots/io/kotest/kotest-extensions-jvm/maven-metadata.xml"},(0,o.kt)("img",{src:"https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fcentral.sonatype.com%2Frepository%2Fmaven-snapshots%2Fio%2Fkotest%2Fkotest-extensions-jvm%2Fmaven-metadata.xml"}))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"io.kotest:kotest-extensions:${version}\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This extension does not support concurrent test execution. Due to the JVM specification there can only be one instance of these extensions running (For example: Only one Environment map must exist). If you try to run more than one instance at a time, the result is undefined.")),(0,o.kt)("h3",{id:"system-property-extension"},"System Property Extension"),(0,o.kt)("p",null,"You can override the System Properties (",(0,o.kt)("inlineCode",{parentName:"p"},"System.getProperties()"),") by either using a listener at the spec level,\nor by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"withSystemProperty")," function to wrap any arbitrary code."),(0,o.kt)("p",null,"With the function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'withSystemProperty("foo", "bar") {\n  System.getProperty("foo") shouldBe "bar"\n}\n')),(0,o.kt)("p",null,"And as an extension:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyTest : FreeSpec() {\n  override val extensions = listOf(SystemPropertyTestListener("foo", "bar"))\n\n  init {\n    "MyTest" {\n      System.getProperty("foo") shouldBe "bar"\n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"no-stdout--no-stderr-listeners"},"No-stdout / no-stderr listeners"),(0,o.kt)("p",null,"Maybe you want to guarantee that you didn't leave any debug messages around, or that you're always using a Logger in your logging."),(0,o.kt)("p",null,"For that, Kotest provides you with ",(0,o.kt)("inlineCode",{parentName:"p"},"NoSystemOutListener")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"NoSystemErrListener"),". These listeners won't allow any messages to be printed straight to ",(0,o.kt)("inlineCode",{parentName:"p"},"System.out")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"System.err"),", respectively:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// In Project or in Spec\noverride val extensions = listOf(NoSystemOutListener, NoSystemErrListener)\n")),(0,o.kt)("h3",{id:"localetimezone-listeners"},"Locale/Timezone listeners"),(0,o.kt)("p",null,"Some codes use and/or are sensitive to the default Locale and default Timezone. Instead of manipulating the system defaults no your own,\nlet Kotest do it for you!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'withDefaultLocale(Locale.FRANCE) {\n  println("My locale is now France! Tr\xe8s bien!")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of("America/Sao_Paulo"))) {\n  println("My timezone is now America/Sao_Paulo! Muito bem!")\n}\n')),(0,o.kt)("p",null,"And as an extension:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// In Project or in Spec\noverride val extensions = listOf(\n  LocaleTestListener(Locale.FRANCE),\n  TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of("America/Sao_Paulo")))\n)\n')))}c.isMDXComponent=!0}}]);