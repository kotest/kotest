"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[97793],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>k});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function s(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var d=n.createContext({}),o=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=o(t.components);return n.createElement(d.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},h=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),h=o(a),k=r,u=h["".concat(d,".").concat(k)]||h[k]||p[k]||l;return a?n.createElement(u,i(i({ref:e},m),{},{components:a})):n.createElement(u,i({ref:e},m))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=h;var s={};for(var d in e)hasOwnProperty.call(e,d)&&(s[d]=e[d]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},10834:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var n=a(87462),r=(a(67294),a(3905));const l={id:"core",title:"Core Matchers",slug:"core-matchers.html",sidebar_label:"Core"},i=void 0,s={unversionedId:"assertions/core",id:"version-5.4.x/assertions/core",title:"Core Matchers",description:"Matchers provided by the kotest-assertions-core module.",source:"@site/versioned_docs/version-5.4.x/assertions/core.md",sourceDirName:"assertions",slug:"/assertions/core-matchers.html",permalink:"/docs/5.4.x/assertions/core-matchers.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md",tags:[],version:"5.4.x",frontMatter:{id:"core",title:"Core Matchers",slug:"core-matchers.html",sidebar_label:"Core"},sidebar:"assertions",previous:{title:"Assertion Mode",permalink:"/docs/5.4.x/assertions/assertion-mode.html"},next:{title:"Overview",permalink:"/docs/5.4.x/assertions/json/json-overview.html"}},d={},o=[],m={toc:o};function p(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Matchers provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"kotest-assertions-core")," module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"General"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"obj.shouldBe(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"General purpose assertion that the given obj and other are both equal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expr.shouldBeTrue()")),(0,r.kt)("td",{parentName:"tr",align:null},"Convenience assertion that the expression is true. Equivalent to ",(0,r.kt)("inlineCode",{parentName:"td"},"expr.shouldBe(true)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expr.shouldBeFalse()")),(0,r.kt)("td",{parentName:"tr",align:null},"Convenience assertion that the expression is false. Equivalent to ",(0,r.kt)("inlineCode",{parentName:"td"},"expr.shouldBe(false)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shouldThrow<T> { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"General purpose construct that asserts that the block throws a ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," Throwable or a subtype of ",(0,r.kt)("inlineCode",{parentName:"td"},"T"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shouldThrowExactly<T> { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"General purpose construct that asserts that the block throws exactly ",(0,r.kt)("inlineCode",{parentName:"td"},"T"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shouldThrowAny { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"General purpose construct that asserts that the block throws a Throwable of any type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shouldThrowMessage(message) { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Verifies that a block of code throws any Throwable with given message")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Types"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"obj.shouldBeSameInstanceAs(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Compares objects by identity, that is, they are the same exact reference.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"obj.shouldBeTypeOf<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the given reference is exactly of type T. Subclass will fail. Ie, ",(0,r.kt)("inlineCode",{parentName:"td"},"1 should beOfType<Number>")," would fail because although 1 ",(0,r.kt)("em",{parentName:"td"},"is")," a Number, the runtime type is not Number.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"obj.shouldBeInstanceOf<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the given reference is of type T or a subclass of T.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"obj.shouldHaveAnnotation(annotationClass)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the object has an annotation of the given type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"obj.shouldBeNull()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that a given reference is null.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Comparables"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"comp.shouldBeLessThan(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Uses ",(0,r.kt)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",(0,r.kt)("inlineCode",{parentName:"td"},"comp")," is less than ",(0,r.kt)("inlineCode",{parentName:"td"},"other"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"comp.shouldBeLessThanOrEqualTo(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Uses ",(0,r.kt)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",(0,r.kt)("inlineCode",{parentName:"td"},"comp")," is less than or equal to ",(0,r.kt)("inlineCode",{parentName:"td"},"other"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"comp.shouldBeEqualComparingTo(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Uses ",(0,r.kt)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",(0,r.kt)("inlineCode",{parentName:"td"},"comp")," is equal to ",(0,r.kt)("inlineCode",{parentName:"td"},"other"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"comp.shouldBeEqualComparingTo(other, comparator)")),(0,r.kt)("td",{parentName:"tr",align:null},"Uses ",(0,r.kt)("inlineCode",{parentName:"td"},"comparator.compare")," to verify that ",(0,r.kt)("inlineCode",{parentName:"td"},"comp")," is equal to ",(0,r.kt)("inlineCode",{parentName:"td"},"other"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"comp.shouldBeGreaterThan(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Uses ",(0,r.kt)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",(0,r.kt)("inlineCode",{parentName:"td"},"comp")," is greater than ",(0,r.kt)("inlineCode",{parentName:"td"},"other"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"comp.shouldBeGreaterThanOrEqualTo(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Uses ",(0,r.kt)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",(0,r.kt)("inlineCode",{parentName:"td"},"comp")," is greater than or equal to ",(0,r.kt)("inlineCode",{parentName:"td"},"other"))))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Iterator"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"iterator.shouldBeEmpty()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the iterator does not have a next value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"iterator.shouldHaveNext()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the iterator has a next value")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Maps"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'map.shouldContain("key", "value")')),(0,r.kt)("td",{parentName:"tr",align:null},'Asserts that the map contains the mapping "key" to "value"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"map.shouldContainAll(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the map contains all the pairs from the given map.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"map.shouldContainExactly(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the map contains exactly the pairs from given map, and no extra.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"map.shouldContainKey(key)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the map contains a key called ",(0,r.kt)("inlineCode",{parentName:"td"},"key")," with any value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"map.shouldContainKeys(keys)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the map contains mappings for all the given keys.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"map.shouldContainValue(value)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the map contains at least one mapping where the value is ",(0,r.kt)("inlineCode",{parentName:"td"},"value"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"map.shouldContainValues(values)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the map contains all the given values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"map.shouldBeEmpty()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this map is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'map.shouldMatchAll("k1" to {it shouldBe "v1"}, "k2" to {it shouldBe "v2"}, ...)')),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that all the entries in the map can be matched with the provided matchers, and no extra.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Strings"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeBlank()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string contains only whitespace, or is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeEmpty()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string has length zero.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeLowerCase()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string is all in lower case.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeUpperCase()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string is all in upper case.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'str.shouldContain("substr")')),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string includes the given substring. The substring can be equal to the string. This matcher is case sensitive. To make this case insensitive use shouldContainIgnoringCase().")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldContain(regex)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string includes the given regular expression.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldContainADigit()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string contains at least one digit.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldContainIgnoringCase(substring)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string contains the substring ignoring case.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldContainOnlyDigits()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string contains only digits, or is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeInteger([radix])")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string contains an integer and returns it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldContainOnlyOnce(substring)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string contains the substring exactly once.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'str.shouldEndWith("suffix")')),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string ends with the given suffix. The suffix can be equal to the string. This matcher is case sensitive. To make this case insensitive call ",(0,r.kt)("inlineCode",{parentName:"td"},"toLowerCase()")," on the value before the matcher.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldHaveLength(length)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string has the given length.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldHaveLineCount(count)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string contains the given number of lines. Similar to ",(0,r.kt)("inlineCode",{parentName:"td"},'str.split("\\n").length.shouldBe(n)'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldHaveMaxLength(max)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string is no longer than the given max length.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldHaveMinLength(min)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string is no shorter than the given min length.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldHaveSameLengthAs(anotherString)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string has the same length as another string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldMatch(regex)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string fully matches the given regex.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'str.shouldStartWith("prefix")')),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string starts with the given prefix. The prefix can be equal to the string. This matcher is case sensitive. To make this case insensitive call ",(0,r.kt)("inlineCode",{parentName:"td"},"toLowerCase()")," on the value before the matcher.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeEqualIgnoringCase(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string is equal to another string ignoring case.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeTruthy()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string is truthy. Truthy is one of the followings: ",'["true", "yes", "y", "1"]')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str.shouldBeFalsy()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the string is falsy. Falsy is one of the followings: ",'["false", "no", "n", "0"]')))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Integers"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeBetween(x, y)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is between x and y, inclusive on both x and y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeLessThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is less than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeLessThanOrEqual(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is less or equal to than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeGreaterThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is greater than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeGreaterThanOrEqual(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is greater than or equal to the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeEven()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is even.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeOdd()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is odd.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeInRange(range)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is included in the given range.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int.shouldBeZero()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the integer is zero")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Longs"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeBetween(x, y)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is between x and y, inclusive on both x and y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeLessThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is less than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeLessThanOrEqual(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is less or equal to than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeGreaterThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is greater than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeGreaterThanOrEqual(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is greater than or equal to the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeInRange(range)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is included in the given range.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeEven()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is even.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeOdd()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is odd.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long.shouldBeZero()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the long is zero")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Doubles or Floats"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBe(value plusOrMinus(tolerance))")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is equal to the given value within a tolerance range. This is the recommended way of testing for double equality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeBetween(x, y)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is between x and y, inclusive on both x and y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeLessThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is less than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeLessThanOrEqual(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is less or equal to than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeGreaterThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is greater than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeGreaterThanOrEqual(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is greater than or equal to the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBePositive()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is positive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeNegative()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is negative")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBePositiveInfinity()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is positive infinity")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeNegativeInfinity()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is negative infinity")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeNaN()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is the Not-a-Number constant NaN")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double.shouldBeZero()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the double is zero")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"BigDecimal"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldHavePrecision(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal precision is equals than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldHaveScale(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal scale is equals than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBePositive()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is positive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeNegative()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is negative")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeZero()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is zero")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeLessThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is less than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeLessThanOrEquals(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is less than or equ")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeGreaterThan(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is greater than the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeGreaterThanOrEquals(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is greater than or equals to the given value n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeInRange(r)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the bigDecimal is in the given range")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Channels"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldReceiveWithin(duration)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel should receive within duration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldReceiveNoElementsWithin(duration)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel should not receive any elements within duration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldHaveSize(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel should receive exactly n elements before closing")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldReceiveAtLeast(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel should receive >= n elements")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldReceiveAtMost(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel should receive <=n elements before closing")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldBeClosed()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel is closed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldBeOpen()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel is open")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel.shouldBeEmpty()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the channel is empty")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Collections"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldBeEmpty()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collections has zero elements.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldBeUnique()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that all the elements of the collection are distinct.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContain(element)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains the given element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainAll(e1, e2, ..., en)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains all the elements listed, where order is not important. Ie, element 2 can be in the collection before element 1.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainDuplicates()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains at least one duplicate element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainExactly()")),(0,r.kt)("td",{parentName:"tr",align:null},"Assert that a collection contains exactly the given values and nothing else, in order.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainExactlyInAnyOrder()")),(0,r.kt)("td",{parentName:"tr",align:null},"Assert that a collection contains exactly the given values and nothing else, in ",(0,r.kt)("em",{parentName:"td"},"any")," order.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainAllInAnyOrder()")),(0,r.kt)("td",{parentName:"tr",align:null},"Assert that a collection contains all the given values and nothing else, in ",(0,r.kt)("em",{parentName:"td"},"any")," order.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainNoNulls()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains no null elements, or is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainNull()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains at least one null element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainOnlyNulls()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains only null elements, or is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveSingleElement(element)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection only contains a single element and that that element is the given one.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveSingleElement { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains a single element by a given predicate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveSize(length)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection is exactly the given length.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSingleton()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection contains only one element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSingleton { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection only one element, and then, runs the block with this element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveLowerBound(element)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the given element is smaller or equal to every element of the collection. Works only for elements that implement Comparable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveUpperBound(element)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the given element is larger or equal to every element of the collection. Works only for elements that implement Comparable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSmallerThan(col)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection is smaller than the other collection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldBeLargerThan(col)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection is larger than the other collection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldBeSameSizeAs(col)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has the same size as the other collection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveAtLeastSize(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has at least size n.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveAtMostSize(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has at most size n.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list.shouldBeSorted()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the list is sorted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list.shouldBeSortedBy { transform }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the list is sorted by the value after applying the transform.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list.shouldContainInOrder(other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this list contains the given list in order. Other elements may appear either side of the given list.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list.shouldExistInOrder({ element }, ...)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this list contains elements matching the predicates in order. Other elements may appear around or between the elements matching the predicates.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list.shouldHaveElementAt(index, element)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this list contains the given element at the given position.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list.shouldStartWith(lst)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this list starts with the elements of the given list, in order.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list.shouldEndWith(lst)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this list ends with the elements of the given list, in order.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"iterable.shouldMatchEach(assertions)")),(0,r.kt)("td",{parentName:"tr",align:null},"Iterates over this list and the assertions and asserts that each element of this list passes the associated assertion. Fails if size of the collections mismatch.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"iterable.shouldMatchInOrder(assertions)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that there is a subsequence of this iterator that matches the assertions in order, with no gaps allowed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"iterable.shouldMatchInOrderSubset(assertions)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that there is a subsequence (possibly with gaps) that matches the assertions in order.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value.shouldBeOneOf(collection)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that a specific instance is contained in a collection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldContainAnyOf(collection)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the collection has at least one of the elements in ",(0,r.kt)("inlineCode",{parentName:"td"},"collection"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value.shouldBeIn(collection)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that an object is contained in collection, checking by value and not by reference.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"URIs"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHaveAuthority(fragment)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri has the given authority.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHaveFragment(fragment)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri has the given fragment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHaveHost(scheme)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri has the given hostname.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHaveParameter(scheme)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri's query string contains the given parameter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHavePath(scheme)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri has the given path.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHavePort(scheme)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri has the given port.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHaveQuery(fragment)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri has the given query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uri.shouldHaveScheme(scheme)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the uri has the given scheme.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Files"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeAbsolute()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file represents an absolute path.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeADirectory()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file denotes a directory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeAFile()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file denotes a file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeCanonical()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is in canonical format.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeEmpty()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file exists but is empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeExecutable()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is executable by the current process.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeHidden()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file exists on disk and is a hidden file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeReadable()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is readable by the current process.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeRelative()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file represents a relative path.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeSmaller(file)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this file is smaller than the given file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeLarger(file)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this file is larger than the given file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeWriteable()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is writeable by the current process.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dir.shouldBeNonEmptyDirectory()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is a directory and is non empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dir.shouldContainFile(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is a directory and that it contains a file with the given name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dir.shouldContainNFiles(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is a directory and that it contains exactly n files.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldExist()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file exists on disk, either a directory or as a file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldHaveExtension(ext)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file ends with the given extension.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldHaveFileSize(size)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file has the given file size.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldHaveName(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file's name matches the given name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldHavePath(path)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file's path matches the given path.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldStartWithPath(prefix)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file's path starts with the given prefix.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dir.shouldContainFileDeep(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Assert that file is a directory and that it or any sub directory contains a file with the given name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dir.shouldContainFiles(name1, name2, ..., nameN)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is a directory and that it contains al files with the given name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldBeSymbolicLink()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the file is a symbolic link.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"file.shouldHaveParent(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Assert that the file has a parent with the given name")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Dates"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveSameYearAs(otherDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date has the same year as the given date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveSameMonthAs(otherDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date has the same month as the given date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveSameDayAs(otherDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date has the same day of the month as the given date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldBeBefore(otherDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date is before the given date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldBeAfter(otherDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date is after the given date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldBeWithin(period, otherDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date is within the period of the given date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldBeWithin(duration, otherDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date is within the duration of the given date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldBeBetween(firstDate, secondDate)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date is between firstdate and seconddate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveYear(year)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct year.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveMonth(month)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct month.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveDayOfYear(day)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct day of year.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveDayOfMonth(day)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct day of month.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveDayOfWeek(day)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct day of week.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveHour(hour)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct hour.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveMinute(Minute)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct minute.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveSecond(second)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct second.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date.shouldHaveNano(nao)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the date have correct nano second.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ZonedDateTime"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zonedDateTime.shouldBeToday()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the ZonedDateTime has the same day as the today.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the ZonedDateTime is equal to other ZonedDateTime using ",(0,r.kt)("inlineCode",{parentName:"td"},"ChronoZonedDateTime.isEqual"),".")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Times"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"time.shouldHaveSameHoursAs(otherTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the time has the same hours as the given time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"time.shouldHaveSameMinutesAs(otherTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the time has the same minutes as the given time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"time.shouldHaveSameSecondsAs(otherTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the time has the same seconds as the given time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"time.shouldHaveSameNanosAs(otherTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the time has the same nanos as the given time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"time.shouldBeBefore(otherTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the time is before the given time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"time.shouldBeAfter(otherTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the time is after the given time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"time.shouldBeBetween(firstTime, secondTime)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the time is between firstTime and secondTime.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Instant"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"instant.shouldBeAfter(anotherInstant)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the instant is after anotherInstant")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"instant.shouldBeBefore(anotherInstant)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the instant is before anotherInstant")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"instant.shouldBeBetween(fromInstant, toInstant)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the instant is between fromInstant and toInstant")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Timestamp"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp.shouldBeAfter(anotherTimestamp)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the timestamp is after anotherTimestamp")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp.shouldBeBefore(anotherTimestamp)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the timestamp is before anotherTimestamp")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp.shouldBeBetween(fromTimestamp, toTimestamp)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the timestamp is between fromTimestamp and toTimestamp")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Concurrent"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shouldCompleteWithin(timeout, unit, function)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the given function completes within the given duration.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shouldTimeout(timeout, unit, function)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that given function does not complete within the given duration.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shouldTimeout(duration, suspendableFunction)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that given suspendable function does not complete within the given duration.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Futures"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"future.shouldBeCancelled()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the future has been cancelled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"future.shouldBeCompleted()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the future has completed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"future.shouldBeCompletedExceptionally()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the the future has completed with an exception.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"future.shouldCompleteExceptionallyWith(throwable)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the the future will complete with given exception.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Threads"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"thread.shouldBeBlocked()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the thread is currently blocked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"thread.shouldBeDaemon()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the thread is a daemon thread.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"thread.shouldBeAlive()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the thread is alive.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"thread.shouldBeTerminated()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the thread has been terminated.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Throwables / Exceptions"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"throwable.shouldHaveMessage(message)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the throwable message is the same of the given one.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"throwable.shouldHaveCause()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the throwable have a cause.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"throwable.shouldHaveCause { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the throwable have a cause, and pass it as parameter to the block")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"throwable.shouldHaveCauseInstanceOf<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the throwable have a cause and it is of type T or a subclass of T.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"throwable.shouldHaveCauseOfType<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the throwable have a cause and it is ",(0,r.kt)("strong",{parentName:"td"},"exactly")," of type T.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Result"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result.shouldBeSuccess()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the result is success")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result.shouldBeSuccess(value)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the result is a success and the value is the same of the given one.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result.shouldBeSuccess(block)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the result is success and then, runs the block with the result value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result.shouldBeFailure()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the result is failure")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result.shouldBeFailureOfType<Type : Throwable>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the result is a failure and the exception class is equals the same of the given one.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result.shouldBeFailure(block)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the result is failure and then, runs the block with the exception.")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"optional.shouldBePresent()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this Optional is present")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"optional.shouldBePresent { value -> .. }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this Optional is present , then execute block with the value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"optional.shouldBeEmpty()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that this optional is empty")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Reflection"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHaveAnnotations()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class has some annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHaveAnnotations(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class has exactly N annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldBeAnnotatedWith<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class is annotated with the given type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldBeAnnotatedWith<T> { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class is annotated with the given type, and then, runs the block with the annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHaveFunction(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class have a function with the given name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHaveFunction(name) { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class have a function with the given name, and then, runs the block with the function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHaveMemberProperty(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class have a member property with the given name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHaveMemberProperty(name) { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class have a member property with the given name, and then, runs the block with the function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldBeSubtypeOf<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class is a subtype of T")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldBeSupertypeOf<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class is a supertype of T")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldBeData()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class is a data class")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldBeSealed()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class is a sealed class")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldBeCompanion()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class is a companion object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHavePrimaryConstructor()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class has a primary constructor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kclass.shouldHaveVisibility(visibility)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the class has the given visibility")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kfunction.shouldHaveAnnotations()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the function has some annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kfunction.shouldHaveAnnotations(n)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the function has exactly N annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kfunction.shouldBeAnnotatedWith<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the function is annotated with the given type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kfunction.shouldBeAnnotatedWith<T> { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the function is annotated with the given type, and then, runs the block with the annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kfunction.shouldHaveReturnType<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the function returns the given type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kfunction.shouldBeInline()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the function is inline")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kfunction.shouldBeInfix()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the function is infix")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kproperty.shouldBeOfType<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the property is of the given type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kproperty.shouldBeConst()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the property is a const")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kproperty.shouldBeLateInit()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the property is a late init var")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldHaveVisibility(visibility)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member have the given visibility")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldBeFinal()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member is final")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldBeOpen()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member is open")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldBeAbstract()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member is abstract")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldBeSuspendable()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member is suspendable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldAcceptParameters(parameters)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member can be called with the parameters (check the types)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldAcceptParameters(parameters) { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member can be called with the parameters (check the types), and then, runs the block with the annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldHaveParametersWithName(parameters)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member has the parameters with the given name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kcallable.shouldHaveParametersWithName(parameters) { block }")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the member has the parameters with the given name, and then, runs the block with the annotation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ktype.shouldBeOfType<T>()")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the KType has the type T")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Statistic"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveMean(mean)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that collection has specific mean with default precision = 4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveMean(mean, precision)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that collection has specific mean with specific precision")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveVariance(mean)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that collection has specific variance with default precision = 4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveVariance(mean, precision)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that collection has specific variance with specific precision")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveStandardDeviation(mean)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that collection has specific standard deviation with default precision = 4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection.shouldHaveStandardDeviation(mean, precision)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that collection has specific standard deviation with specific precision")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Regex"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"regex.shouldBeRegex(anotherRegex)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that regex is equal to anotherRegex by comparing their pattern and regexOptions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"regex.shouldHavePattern(regexPattern)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that regex have given regexPattern")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"regex.shouldHaveExactRegexOptions(regexOptions)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that regex have exactly the given regexOptions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"regex.shouldIncludeRegexOption(regexOption)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that regex include the given regexOption")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"regex.shouldIncludeRegexOptions(regexOptions)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that regex include of the given regexOptions")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Selective Matchers"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"any.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the any is equal to other considering only given properties. See ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/kotest/kotest/blob/1f4069d78faead65a0d7e8c7f1b689b417a655d2/kotest-assertions/kotest-assertions-core/src/jvmMain/kotlin/io/kotest/matchers/equality/reflection.kt#L20"},"Example"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"any.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the any is equal to other ignoring the given properties. See ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/kotest/kotest/blob/1f4069d78faead65a0d7e8c7f1b689b417a655d2/kotest-assertions/kotest-assertions-core/src/jvmMain/kotlin/io/kotest/matchers/equality/reflection.kt#L127"},"Example"))))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field by Field Comparison Matchers"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"any.shouldBeEqualToComparingFields(other: T)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the any is equal to other considering their fields(ignoring private fields) instead of ",(0,r.kt)("inlineCode",{parentName:"td"},"equals")," method.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"any.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)")),(0,r.kt)("td",{parentName:"tr",align:null},"Asserts that the any is equal to other considering their fields and private fields(if ",(0,r.kt)("inlineCode",{parentName:"td"},"ignorePrivateFields")," is false) instead of ",(0,r.kt)("inlineCode",{parentName:"td"},"equals")," method.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"del"},"any.shouldBeEqualToComparingFieldsExcept(other: T, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"Asserts that the any is equal to other considering their public fields ignoring private fields and other fields mentioned by ",(0,r.kt)("inlineCode",{parentName:"del"},"ignoreProperty")," and ",(0,r.kt)("inlineCode",{parentName:"del"},"ignoreProperties")," instead of ",(0,r.kt)("inlineCode",{parentName:"del"},"equals")," method.")," deprecated. shouldBeEqualToComparingFields and shouldBeEqualToIgnoringFields are alternative.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"del"},"any.shouldBeEqualToComparingFieldsExcept(other: T, ignorePrivateFields: Boolean, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"Asserts that the any is equal to other considering all their fields including private fields(if ",(0,r.kt)("inlineCode",{parentName:"del"},"ignorePrivateFields")," is false) but ignoring fields mentioned by ",(0,r.kt)("inlineCode",{parentName:"del"},"ignoreProperty")," and ",(0,r.kt)("inlineCode",{parentName:"del"},"ignoreProperties")," instead of ",(0,r.kt)("inlineCode",{parentName:"del"},"equals")," method."),"  deprecated. shouldBeEqualToComparingFields and shouldBeEqualToIgnoringFields are alternative.")))))}p.isMDXComponent=!0}}]);