"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[40989],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),k=c(n),p=r,h=k["".concat(s,".").concat(p)]||k[p]||d[p]||i;return n?o.createElement(h,a(a({ref:t},u),{},{components:n})):o.createElement(h,a({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}k.displayName="MDXCreateElement"},88944:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const i={id:"blockhound",title:"BlockHound",sidebar_label:"BlockHound",slug:"blockhound.html"},a=void 0,l={unversionedId:"extensions/blockhound",id:"version-5.6.x/extensions/blockhound",title:"BlockHound",description:"The Kotest BlockHound extension activates BlockHound support for coroutines. It helps to detect blocking code on non-blocking coroutine threads, e.g. when accidentally calling a blocking I/O library function on a UI thread.",source:"@site/versioned_docs/version-5.6.x/extensions/blockhound.md",sourceDirName:"extensions",slug:"/extensions/blockhound.html",permalink:"/docs/5.6.x/extensions/blockhound.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/blockhound.md",tags:[],version:"5.6.x",frontMatter:{id:"blockhound",title:"BlockHound",sidebar_label:"BlockHound",slug:"blockhound.html"},sidebar:"extensions",previous:{title:"Pitest",permalink:"/docs/5.6.x/extensions/pitest.html"}},s={},c=[{value:"Getting Started",id:"getting-started",level:3},{value:"Detection",id:"detection",level:3},{value:"Customization",id:"customization",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Kotest BlockHound extension activates ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/reactor/BlockHound"},"BlockHound")," support for coroutines. It helps to detect blocking code on non-blocking coroutine threads, e.g. when accidentally calling a blocking I/O library function on a UI thread."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To use this extension add the ",(0,r.kt)("inlineCode",{parentName:"p"},"io.kotest.extensions:kotest-extensions-blockhound")," module to your test compile path.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://search.maven.org/artifact/io.kotest.extensions/kotest-extensions-blockhound"},(0,r.kt)("img",{src:"https://img.shields.io/maven-central/v/io.kotest.extensions/kotest-extensions-blockhound.svg?label=latest%20release"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/io/kotest/extensions/kotest-extensions-blockhound/"},(0,r.kt)("img",{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/io.kotest.extensions/kotest-extensions-blockhound.svg?label=latest%20snapshot"}))),(0,r.kt)("h3",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Register the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockHound")," extension in your test class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@DoNotParallelize\nclass BlockHoundSpecTest : FunSpec({\n   extension(BlockHound())\n\n   test("detects for spec") {\n      blockInNonBlockingContext()\n   }\n})\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockHound")," extension can also be registered per ",(0,r.kt)("a",{parentName:"p",href:"../framework/testcaseconfig.html"},"test case")," or at the ",(0,r.kt)("a",{parentName:"p",href:"../framework/project-config.html"},"project level"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This code is sensitive to concurrency. There can only be one instance of this extension running at a time as it will take effect globally."),(0,r.kt)("p",{parentName:"admonition"},"You cannot register the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockHound")," extension multiple times at different levels."),(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"@DoNotParallelize")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockHound"),"-enabled tests.")),(0,r.kt)("h3",{id:"detection"},"Detection"),(0,r.kt)("p",null,"Blocking calls will be detected in coroutine threads which are expected not to block. Such threads are created by the default dispatcher as this example demonstrates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'private suspend fun blockInNonBlockingContext() {\n   withContext(Dispatchers.Default) {\n      @Suppress("BlockingMethodInNonBlockingContext")\n      Thread.sleep(2)\n   }\n}\n')),(0,r.kt)("p",null,"The BlockHound extension will by default produce an exception like this whenever it detects a blocking call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"reactor.blockhound.BlockingOperationError: Blocking call! java.lang.Thread.sleep\n    at io.kotest.extensions.blockhound.KotestBlockHoundIntegration.applyTo$lambda-2$lambda-1(KotestBlockHoundIntegration.kt:27)\n    at reactor.blockhound.BlockHound$Builder.lambda$install$8(BlockHound.java:427)\n    at reactor.blockhound.BlockHoundRuntime.checkBlocking(BlockHoundRuntime.java:89)\n    at java.base/java.lang.Thread.sleep(Thread.java)\n    at io.kotest.extensions.blockhound.BlockHoundTestKt$blockInNonBlockingContext$2.invokeSuspend(BlockHoundTest.kt:17)\n    at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n    at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:570)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:677)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:664)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"By invoking it as ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockHound(BlockHoundMode.PRINT)"),", it will print detected calls and continue the test without interruption.")),(0,r.kt)("p",null,"Whenever a blocking call is detected, you can"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"replace the call with a non-blocking one (using a coroutine-aware library), or"),(0,r.kt)("li",{parentName:"ul"},"schedule the calling coroutine to run on a separate I/O thread (e.g. via ",(0,r.kt)("inlineCode",{parentName:"li"},"Dispatchers.IO"),"), or"),(0,r.kt)("li",{parentName:"ul"},"add an exception if the blocking is harmless (see below).")),(0,r.kt)("h3",{id:"customization"},"Customization"),(0,r.kt)("p",null,"To customize BlockHound, familiarize yourself with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/reactor/BlockHound/blob/master/docs/README.md"},"BlockHound documentation"),"."),(0,r.kt)("p",null,"Exceptions for blocking calls considered harmless can be added via a separate ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockHoundIntegration")," class like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import reactor.blockhound.BlockHound\nimport reactor.blockhound.integration.BlockHoundIntegration\n\nclass MyBlockHoundIntegration : BlockHoundIntegration {\n   override fun applyTo(builder: BlockHound.Builder): Unit = with(builder) {\n      allowBlockingCallsInside("org.slf4j.LoggerFactory", "performInitialization")\n   }\n}\n')),(0,r.kt)("p",null,"In order to allow ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockHound")," to auto-detect and load the integration, add its fully qualified class name to a service provider configuration file\n",(0,r.kt)("inlineCode",{parentName:"p"},"resources/META-INF/services/reactor.blockhound.integration.BlockHoundIntegration"),"."))}d.isMDXComponent=!0}}]);