"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[12285],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,d=p["".concat(l,".").concat(m)]||p[m]||f[m]||o;return n?i.createElement(d,r(r({ref:t},c),{},{components:n})):i.createElement(d,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var u=2;u<o;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},11213:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var i=n(87462),a=(n(67294),n(3905));const o={id:"test_case_config",title:"Test Case Config",slug:"testcaseconfig.html"},r=void 0,s={unversionedId:"framework/test_case_config",id:"version-6.0/framework/test_case_config",title:"Test Case Config",description:"Each test can be configured with various parameters. After the test name, invoke the config function",source:"@site/versioned_docs/version-6.0/framework/test_case_config.md",sourceDirName:"framework",slug:"/framework/testcaseconfig.html",permalink:"/docs/framework/testcaseconfig.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-6.0/framework/test_case_config.md",tags:[],version:"6.0",frontMatter:{id:"test_case_config",title:"Test Case Config",slug:"testcaseconfig.html"},sidebar:"framework",previous:{title:"Temporary Files",permalink:"/docs/framework/temporary-files"},next:{title:"Project Level Config",permalink:"/docs/framework/project-config.html"}},l={},u=[],c={toc:u};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Each test can be configured with various parameters. After the test name, invoke the config function\npassing in the parameters you wish to set. The available parameters are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"invocations")," - The number of times to run this test. Useful if you have a non-deterministic test and you want to run\nthat particular test a set number of times to see if it eventually fails. A test will only succeed if all invocations\nsucceed. Defaults to 1."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enabled")," - If set to ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," then this test is ",(0,a.kt)("a",{parentName:"li",href:"/docs/framework/conditional-evaluation.html"},"disabled"),". Can be useful if a test needs\nto be temporarily ignored. You can also use this parameter with boolean expressions to run a test only under certain\nconditions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enabledIf")," - A function which provides the same ability as ",(0,a.kt)("inlineCode",{parentName:"li"},"enabled")," but is lazily evaluated when the test case is\ndue for execution."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeout")," - sets a timeout for this test. If the test has not finished in that time then the test fails. Useful for\ncode that is non-deterministic and might not finish. Timeout is of type ",(0,a.kt)("inlineCode",{parentName:"li"},"kotlin.Duration"),". Note, if you have multiple\ninvocations of this test then this timeout is applied to the sum of all invocations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"invocationTimeout")," - sets a timeout for each invocation of this test. If the test has not finished in that time then\nthe test fails. Useful for code that is non-deterministic and might not finish. Timeout is of type ",(0,a.kt)("inlineCode",{parentName:"li"},"kotlin.Duration"),".\nNote, if you have multiple invocations then this timeout is applied to each invocation separately."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tags")," - a set of tags that can be used to group tests (see detailed description below)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"listeners")," - register ",(0,a.kt)("a",{parentName:"li",href:"/docs/framework/extensions/extensions-introduction.html"},"test listeners")," to run only on this test."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"extensions")," - register extensions to run only on this test."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"severity")," - applies a severity level used by the allure extension and other extensions that support it."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"failfast")," - if set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," then the test engine will stop running tests in this spec after the first failure."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"assertSoftly")," - if set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," then the test engine will run assertions in soft mode.\nSee ",(0,a.kt)("a",{parentName:"li",href:"/docs/assertions/soft-assertions.html"},"soft assertions")," for more details."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"blockingTest")," - When set to true, execution will switch to a dedicated thread for each test case in this spec,\ntherefore allowing the test engine to safely interrupt tests via Thread.interrupt when they time out. This is useful\nif you are testing blocking code and want to use timeouts because coroutine timeouts are cooperative by nature."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"retries")," - The number of times to retry a test if it fails."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"retryDelay")," - The delay between retries. Delay is of type ",(0,a.kt)("inlineCode",{parentName:"li"},"kotlin.Duration"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"coroutineDebugProbes")," - If set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," then the test engine will enable coroutine debugging probes.\nSee ",(0,a.kt)("a",{parentName:"li",href:"/docs/framework/coroutines/coroutine-debugging.html"},"debugging coroutines"),") for more details.")),(0,a.kt)("p",null,"An example of setting config on a test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyTests : ShouldSpec() {\n  init {\n    should("return the length of the string").config(invocations = 10) {\n      "sammy".length shouldBe 5\n      "".length shouldBe 0\n    }\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyTests : WordSpec() {\n  init {\n    "String.length" should {\n      "return the length of the string".config(timeout = 2.seconds) {\n        "sammy".length shouldBe 5\n        "".length shouldBe 0\n      }\n    }\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class FunSpecTest : FunSpec() {\n  init {\n    test("FunSpec should support config syntax").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n')),(0,a.kt)("p",null,"You can also specify a ",(0,a.kt)("inlineCode",{parentName:"p"},"DefaultTestConfig")," which will be used as the fallback for all test cases in a spec,\nunless overridden at the test level."),(0,a.kt)("p",null,"Set the defaultTestConfig val:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = DefaultTestConfig(enabled = true, invocations = 3)\n\n    test("this test would run 3 times") {\n      // ...\n    }\n\n    test("this test would run 1 time because it is overriden at the test level").config(invocations = 1) {\n      // ...\n    }\n  }\n}\n')))}f.isMDXComponent=!0}}]);