"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[86080],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=s,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||a;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7735:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(87462),s=(n(67294),n(3905));const a={id:"inspectors",title:"Inspectors",slug:"inspectors.html"},o=void 0,i={unversionedId:"assertions/inspectors",id:"assertions/inspectors",title:"Inspectors",description:"Inspectors allow us to test elements in a collection. They are extension functions for collections and arrays that test",source:"@site/docs/assertions/inspectors.md",sourceDirName:"assertions",slug:"/assertions/inspectors.html",permalink:"/docs/next/assertions/inspectors.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/inspectors.md",tags:[],version:"current",frontMatter:{id:"inspectors",title:"Inspectors",slug:"inspectors.html"},sidebar:"assertions",previous:{title:"Retry",permalink:"/docs/next/assertions/retry.html"},next:{title:"Assertion Mode",permalink:"/docs/next/assertions/assertion-mode.html"}},l={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Inspectors allow us to test elements in a collection. They are extension functions for collections and arrays that test\nthat all, none or some of the elements pass the given assertions. For example, to test that a list of names contains\nat least two elements which have a length of 7 or more, we can do this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'val xs = listOf("sam", "gareth", "timothy", "muhammad")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n')),(0,s.kt)("p",null,"Similarly, if we wanted to asset that ",(0,s.kt)("em",{parentName:"p"},"no")," elements in a collection passed the assertions, we could do something like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'xs.forNone {\n  it.shouldContain("x")\n  it.shouldStartWith("bb")\n}\n')),(0,s.kt)("p",null,"If you want to filter a collection to only elements that pass the assertions, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"filterMatching")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'xs.filterMatching {\n  it.shouldContain("x")\n  it.shouldStartWith("bb")\n}.shouldBeEmpty()\n')),(0,s.kt)("p",null,"The full list of inspectors are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forAll")," which asserts every element passes the assertions"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forNone")," which asserts no element passes"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forOne")," which asserts only a single element passed"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forAtMostOne")," which asserts that either 0 or 1 elements pass"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forAtLeastOne")," which asserts that 1 or more elements passed"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forAtLeast(k)")," which is a generalization that k or more elements passed"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forAtMost(k)")," which is a generalization that k or fewer elements passed"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forAny")," which is an alias for ",(0,s.kt)("inlineCode",{parentName:"li"},"forAtLeastOne")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forSome")," which asserts that between 1 and n-1 elements passed. Ie, if NONE pass or ALL pass then we consider that a failure."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"forExactly(k)")," which is a generalization that exactly k elements passed. This is the basis for the implementation of the other methods"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"filterMatching")," which filters the collection to only include elements that pass the assertions")))}m.isMDXComponent=!0}}]);