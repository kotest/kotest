"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[20128],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,k=m["".concat(l,".").concat(c)]||m[c]||d[c]||r;return n?o.createElement(k,i(i({ref:t},p),{},{components:n})):o.createElement(k,i({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(67294),a=n(86010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var o=n(87462),a=n(67294),r=n(86010),i=n(76775),s=n(91980),l=n(67392),u=n(50012);function p(e){return function(e){var t;return(null==(t=a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function c(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=d(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[l,p]=c({queryString:n,groupId:o}),[k,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,u.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),h=(()=>{const e=l??k;return m({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var g=n(12466),h=n(72389);const f="tabList__CuJ",b="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,g.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),o=l[n].value;o!==i&&(p(t),s(o))},m=e=>{var t;let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},s,{className:(0,r.Z)("tabs__item",b,null==s?void 0:s.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function w(e){const t=k(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",f)},a.createElement(v,(0,o.Z)({},e,t)),a.createElement(y,(0,o.Z)({},e,t)))}function N(e){const t=(0,h.Z)();return a.createElement(w,(0,o.Z)({key:String(t)},e))}},70551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var o=n(87462),a=(n(67294),n(3905)),r=n(74866),i=n(85162);const s={title:"Setup",slug:"project-setup.html"},l=void 0,u={unversionedId:"framework/setup",id:"version-6.0/framework/setup",title:"Setup",description:"The Kotest test framework is supported on JVM, Javascript, Native and Wasm.",source:"@site/versioned_docs/version-6.0/framework/setup.mdx",sourceDirName:"framework",slug:"/framework/project-setup.html",permalink:"/docs/framework/project-setup.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-6.0/framework/setup.mdx",tags:[],version:"6.0",frontMatter:{title:"Setup",slug:"project-setup.html"},sidebar:"framework",previous:{title:"Introduction",permalink:"/docs/framework/framework.html"},next:{title:"Writing Tests",permalink:"/docs/framework/writing-tests.html"}},p={},d=[{value:"Re-running tests",id:"re-running-tests",level:2}],m={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Kotest test framework is supported on JVM, Javascript, Native and Wasm.\nTo enable Kotest for multiple platforms, follow the steps for the platform you are targeting as detailed in the following tabs."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The KMP support in Kotest 6.0 has changed from the previous versions. There is no longer a compiler plugin but a simplified setup.\nPlease see the rest of this page for details on how to configure Kotest for KMP in Kotest 6.0 and later.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"When running the Gradle test task, Gradle will cache the output and report no tests executed if no source code has changed.\nSee the section on rerunning tests for details on how to disable this behaviour.")),(0,a.kt)(r.Z,{defaultValue:"JVM",values:[{label:"JVM",value:"JVM"},{label:"Kotlin/JS",value:"JS"},{label:"Kotlin/WasmJS",value:"WasmJS"},{label:"Kotlin/Native",value:"Native"},{label:"Android",value:"Android"},{label:"Multiplatform",value:"Multiplatform"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"JVM",mdxType:"TabItem"},(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A working project with JVM support can be found here:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kotest/kotest-examples"},"https://github.com/kotest/kotest-examples"))),(0,a.kt)("p",null,"Kotest on the JVM has two ways for running tests. One uses the ",(0,a.kt)("a",{parentName:"p",href:"https://plugins.gradle.org/plugin/io.kotest"},"Kotest gradle plugin"),", which provides detailed test output in the console, and a rich experience in Intellij (in conjuction with the Intellij Kotest plugin).\nThe other option uses the ",(0,a.kt)("a",{parentName:"p",href:"https://junit.org/junit5/docs/current/user-guide/#running-tests-build-gradle"},"JUnit Platform")," gradle plugin which is ubiquitous in the JVM ecosystem but lacks some features of the Kotest gradle plugin."),(0,a.kt)("p",null,"To use the Kotest gradle plugin, add the following to your ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle.kts")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n   id("io.kotest") version "<kotest-version>"\n}\n')),(0,a.kt)("p",null,"Add the following dependency to your build:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n   testImplementation("io.kotest:kotest-framework-engine:$version")\n}\n')),(0,a.kt)("p",null,"And then execute the ",(0,a.kt)("inlineCode",{parentName:"p"},"jvmKotest")," task in gradle, or run tests directly from the IDE."),(0,a.kt)("p",null,"To use the JUnit Platform plugin, add the following to your ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle.kts")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"tasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n")),(0,a.kt)("p",null,"Add the following dependency to your build:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n   testImplementation("io.kotest:kotest-runner-junit5:$version")\n}\n')),(0,a.kt)("p",null,"And then execute the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," task in gradle, or run tests directly from the IDE.")),(0,a.kt)(i.Z,{value:"JS",mdxType:"TabItem"},(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A working JS project can be found here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kotest/kotest-examples"},"https://github.com/kotest/kotest-examples"))),(0,a.kt)("p",null,"Add the ",(0,a.kt)("a",{parentName:"p",href:"https://plugins.gradle.org/plugin/io.kotest"},"Kotest gradle plugin")," and Google KSP plugin to to your build."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n   id("io.kotest") version "<kotest-version>"\n   id("com.google.devtools.ksp") version "<kotlin-verson>-<ksp-version>"\n}\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"kotest-framework-engine")," dependency to your ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"jsTest")," source set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'kotlin {\n   js()\n   sourceSets {\n      commonTest {\n         dependencies {\n            implementation("io.kotest:kotest-framework-engine:<kotest-version>")\n         }\n      }\n   }\n}\n')),(0,a.kt)("p",null,"Tests can be placed in either ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"jsTest"),".\nRun your tests using the ",(0,a.kt)("inlineCode",{parentName:"p"},"jsTest")," gradle task."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The JS test engine is feature limited when compared to the JVM test engine. The major restriction is that annotation\nbased configuration will not work as Kotlin does not expose annotations at runtime to JS code."))),(0,a.kt)(i.Z,{value:"WasmJS",mdxType:"TabItem"},(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A working WasmJS project can be found here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kotest/kotest-examples"},"https://github.com/kotest/kotest-examples"))),(0,a.kt)("p",null,"Add the ",(0,a.kt)("a",{parentName:"p",href:"https://plugins.gradle.org/plugin/io.kotest"},"Kotest gradle plugin")," and Google KSP plugin to to your build."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n   id("io.kotest") version "<kotest-version>"\n   id("com.google.devtools.ksp") version "<kotlin-verson>-<ksp-version>"\n}\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"kotest-framework-engine")," dependency to your ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmJsTest")," source set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'kotlin {\n   wasmJs()\n   sourceSets {\n      commonTest {\n         dependencies {\n            implementation("io.kotest:kotest-framework-engine:<kotest-version>")\n         }\n      }\n   }\n}\n')),(0,a.kt)("p",null,"Tests can be placed in either ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmJsTest"),".\nRun your tests using the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmJsTest")," gradle task."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The WasmJS test engine is feature limited when compared to the JVM test engine. The major restriction is that annotation\nbased configuration will not work as Kotlin does not expose annotations at runtime to Wasm code."))),(0,a.kt)(i.Z,{value:"Native",mdxType:"TabItem"},(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A working native project with linux, windows and macos configured, with unit and data driven test examples, can be found here:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kotest/kotest-examples"},"https://github.com/kotest/kotest-examples"))),(0,a.kt)("p",null,"Add the ",(0,a.kt)("a",{parentName:"p",href:"https://plugins.gradle.org/plugin/io.kotest"},"Kotest gradle plugin")," and Google KSP plugin to to your build."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n   id("io.kotest") version "<kotest-version>"\n   id("com.google.devtools.ksp") version "<kotlin-verson>-<ksp-version>"\n}\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"kotest-framework-engine")," dependency to your ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"nativeTest")," or platform specific sourceset:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'kotlin {\n   linuxX64() // add any supported native target\n   sourceSets {\n      commonTest {\n         dependencies {\n            implementation("io.kotest:kotest-framework-engine:<kotest-version>")\n         }\n      }\n   }\n}\n')),(0,a.kt)("p",null,"Tests can be placed in either ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest")," or a specific native sourceset.\nRun your tests using the standard test tasks, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"linuxX86Test"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The native test engine is feature limited when compared to the JVM test engine. The major restriction is that annotation\nbased configuration will not work as Kotlin does not expose annotations at runtime to native code."))),(0,a.kt)(i.Z,{value:"Android",mdxType:"TabItem"},(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Currently, only Unit tests are supported in Kotest.\nThe following steps enable Kotest to be used for unit tests, where the Android framework is not needed or is mocked that usually reside in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"src/test")," folder of your module.")),(0,a.kt)("p",null,"Kotest on Android uses the ",(0,a.kt)("a",{parentName:"p",href:"https://junit.org/junit5/docs/current/user-guide/#running-tests-build-gradle"},"JUnit Platform")," gradle plugin.\nThis requires configuring the android test options block in your build file and then adding the Kotest junit5 runner dependency."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"android.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"dependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A working Android project with unit and data driven test examples, can be found here:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kotest/kotest-examples"},"https://github.com/kotest/kotest-examples")))),(0,a.kt)(i.Z,{value:"",mdxType:"TabItem"},(0,a.kt)("p",null,"To configure the test framework for multiplatform, combie the steps for JVM, JS and Native as detailed in the previous tabs.")),(0,a.kt)(i.Z,{value:"Multiplatform",mdxType:"TabItem"},(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A working multiplatform project with JVM, JS and native targets, and unit and data driven test examples, can be found here:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kotest/kotest-examples"},"https://github.com/kotest/kotest-examples"))),(0,a.kt)("p",null,"Add the ",(0,a.kt)("a",{parentName:"p",href:"https://plugins.gradle.org/plugin/io.kotest"},"Kotest gradle plugin")," and Google KSP plugin to to your build."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n   id("io.kotest") version "<kotest-version>"\n   id("com.google.devtools.ksp") version "<kotlin-verson>-<ksp-version>"\n}\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"kotest-framework-engine")," dependency to your ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest")," source set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'kotlin {\n   sourceSets {\n      commonTest {\n         dependencies {\n            implementation("io.kotest:kotest-framework-engine:<kotest-version>")\n         }\n      }\n   }\n}\n')),(0,a.kt)("p",null,"Tests can be placed in either ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest")," or a platform specific directory such as ",(0,a.kt)("inlineCode",{parentName:"p"},"jsTest")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"macosX64Test")," etc.\nRun your tests using the gradle ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," task, or a platform specific test task such as ",(0,a.kt)("inlineCode",{parentName:"p"},"macosX64Test")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The JS, Wasm and native test engines are feature limited when compared to the JVM test engine. The major restriction is that annotation\nbased configuration will not work as Kotlin does not expose annotations at runtime to non-JVM platforms.")))),(0,a.kt)("h2",{id:"re-running-tests"},"Re-running tests"),(0,a.kt)("p",null,"By default, Gradle's incremental build will skip running tests if no source code has changed, marking the task as UP-TO-DATE. This can be inconvenient during debugging."),(0,a.kt)("p",null,"To force your tests to run every time, you can temporarily add the following configuration to your build.gradle.kts file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'tasks.withType<Test>().configureEach {\n   logger.lifecycle("UP-TO-DATE check for $name is disabled, forcing it to run.")\n   outputs.upToDateWhen { false }\n}\n')),(0,a.kt)("p",null,"Quick Alternative: For a single re-run without modifying build files, you can use the --rerun flag from the command line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"./gradlew test --rerun\n")))}c.isMDXComponent=!0}}]);