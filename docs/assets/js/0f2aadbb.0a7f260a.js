"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[40786],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,k=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?o.createElement(k,s(s({ref:t},p),{},{components:n})):o.createElement(k,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},13546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const i={id:"koin",title:"Koin",sidebar_label:"Koin",slug:"koin.html"},s=void 0,a={unversionedId:"extensions/koin",id:"extensions/koin",title:"Koin",description:"Koin",source:"@site/docs/extensions/koin.md",sourceDirName:"extensions",slug:"/extensions/koin.html",permalink:"/docs/next/extensions/koin.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/koin.md",tags:[],version:"current",frontMatter:{id:"koin",title:"Koin",sidebar_label:"Koin",slug:"koin.html"}},l={},c=[{value:"Koin",id:"koin",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"koin"},"Koin"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://insert-koin.io/"},"Koin DI Framework")," can be used with Kotest through the ",(0,r.kt)("inlineCode",{parentName:"p"},"KoinExtension")," extension."),(0,r.kt)("p",null,"To use the extension in your project, add the dependency to your project:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://central.sonatype.com/artifact/io.kotest/kotest-extensions-koin"},(0,r.kt)("img",{src:"https://img.shields.io/maven-central/v/io.kotest/kotest-extensions-koin.svg?label=latest%20release"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://central.sonatype.com/repository/maven-snapshots/io/kotest/kotest-extensions-koin/maven-metadata.xml"},(0,r.kt)("img",{src:"https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fcentral.sonatype.com%2Frepository%2Fmaven-snapshots%2Fio%2Fkotest%2Fkotest-extensions-koin%2Fmaven-metadata.xml"}))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Since Kotest 6.0, all extensions are published under the ",(0,r.kt)("inlineCode",{parentName:"p"},"io.kotest")," group once again, with version cadence tied to\nmain Kotest releases.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"io.kotest:kotest-extensions-koin:${kotestVersion}\n")),(0,r.kt)("p",null,"With the dependency added, we can easily use Koin in our tests!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class KotestAndKoin : KoinTest, FunSpec() {\n  init {\n    extension(KoinExtension(koinModule) { mockk<UserService>() })\n\n    test("use userService") {\n      val userService by inject<UserService>()\n\n      userService.getUser().username shouldBe "LeoColman"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"By default, the extension will start/stop the Koin context between leaf tests.\nIf you are using a nested spec style (like DescribeSpec) and instead want the Koin context\nto persist over all leafs of a root tests (for example to share mocked declarations between tests),\nyou can specify the lifecycle mode as ",(0,r.kt)("inlineCode",{parentName:"p"},"KoinLifecycleMode.Root")," in the KoinExtension constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class KotestAndKoin : KoinTest, DescribeSpec() {\n\n  init {\n    extension(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    describe("use userService") {\n      val userService by inject<UserService>()\n\n      it("inside a leaf test") {\n        userService.getUser().username shouldBe "LeoColman"\n      }\n\n      it("this shares the same context") {\n        userService.getUser().username shouldBe "LeoColman"\n      }\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);