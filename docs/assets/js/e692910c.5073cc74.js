"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[98868],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=s,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return r?n.createElement(h,a(a({ref:t},u),{},{components:r})):n.createElement(h,a({ref:t},u))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,a[1]=l;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},56625:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(87462),s=(r(67294),r(3905));const o={id:"power-assert",title:"Power Assert",sidebar_label:"Power Assert"},a="Power Assert",l={unversionedId:"assertions/power-assert",id:"assertions/power-assert",title:"Power Assert",description:"Power Assert support was introduced in Kotest 6.0 that enhances assertion failure messages by providing detailed",source:"@site/docs/assertions/power-assert.md",sourceDirName:"assertions",slug:"/assertions/power-assert",permalink:"/docs/next/assertions/power-assert",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/power-assert.md",tags:[],version:"current",frontMatter:{id:"power-assert",title:"Power Assert",sidebar_label:"Power Assert"},sidebar:"assertions",previous:{title:"Soft Assertions",permalink:"/docs/next/assertions/soft-assertions.html"},next:{title:"Eventually",permalink:"/docs/next/assertions/eventually.html"}},i={},p=[{value:"How It Works",id:"how-it-works",level:2},{value:"Setup",id:"setup",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"power-assert"},"Power Assert"),(0,s.kt)("p",null,"Power Assert support was introduced in Kotest 6.0 that enhances assertion failure messages by providing detailed\ninformation about the values of each part of an expression when an assertion fails. This makes it easier to understand\nwhy an assertion failed without having to add additional debug statements."),(0,s.kt)("h2",{id:"how-it-works"},"How It Works"),(0,s.kt)("p",null,"When an assertion fails, Power Assert shows the values of each part of the expression in the error message, making it\nclear what went wrong. This is particularly useful for complex expressions with method calls or property access chains."),(0,s.kt)("p",null,"For example, consider this assertion:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'val hello = "Hello"\nval world = "world!"\nhello.substring(1, 3) shouldBe world.substring(1, 4)\n')),(0,s.kt)("p",null,"Without Power Assert, the error message would simply be:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'expected:<"orl"> but was:<"el">\n')),(0,s.kt)("p",null,"With Power Assert enabled, the error message becomes much more informative:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'hello.substring(1, 3) shouldBe world.substring(1, 4)\n|     |                        |     |\n|     |                        |     orl\n|     |                        world!\n|     el\nHello\n\nexpected:<"orl"> but was:<"el">\n')),(0,s.kt)("p",null,"This detailed output shows the values of each part of the expression, making it immediately clear what's happening:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"hello"),' is "Hello"'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"hello.substring(1, 3)"),' is "el"'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"world"),' is "world!"'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"world.substring(1, 4)"),' is "orl"')),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("p",null,"Power Assert is implemented as a Kotlin compiler plugin that's part of Kotlin 2.0+. To use it with Kotest 6.0:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Add the Power Assert plugin to your build:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n  kotlin("jvm") version "2.2.0"\n  id("org.jetbrains.kotlin.plugin.power-assert") version "2.2.0"\n}\n')),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Configure which assertion functions should be enhanced with Power Assert:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'powerAssert {\n  functions = listOf("io.kotest.matchers.shouldBe")\n}\n')))}c.isMDXComponent=!0}}]);