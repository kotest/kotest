"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[71425],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94363:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const o={id:"release6",title:"Features and Changes in Kotest 6.0",sidebar_label:"Release 6.0"},r=void 0,l={unversionedId:"release6",id:"version-6.0/release6",title:"Features and Changes in Kotest 6.0",description:"This page lists the features and changes in Kotest 6.0.",source:"@site/versioned_docs/version-6.0/release_6.0.md",sourceDirName:".",slug:"/release6",permalink:"/docs/release6",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-6.0/release_6.0.md",tags:[],version:"6.0",frontMatter:{id:"release6",title:"Features and Changes in Kotest 6.0",sidebar_label:"Release 6.0"},sidebar:"docs",previous:{title:"Quick Start",permalink:"/docs/quickstart"},next:{title:"Blogs and Articles",permalink:"/docs/blogs"}},s={},u=[{value:"New Features",id:"new-features",level:2},{value:"Enhanced Concurrency Support",id:"enhanced-concurrency-support",level:3},{value:"Package-Level Configuration",id:"package-level-configuration",level:3},{value:"Shared Test Configuration",id:"shared-test-configuration",level:3},{value:"New Isolation Mode: InstancePerRoot",id:"new-isolation-mode-instanceperroot",level:3},{value:"TestClock Implementation",id:"testclock-implementation",level:3},{value:"Enhanced Coroutine Debugging",id:"enhanced-coroutine-debugging",level:3},{value:"Decoroutinator Extension",id:"decoroutinator-extension",level:3},{value:"Power Assert Support",id:"power-assert-support",level:3},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Minimum Versions",id:"minimum-versions",level:3},{value:"Kotlin Multiplatform Support",id:"kotlin-multiplatform-support",level:3},{value:"Extensions Publishing",id:"extensions-publishing",level:3},{value:"Project Configuration Location",id:"project-configuration-location",level:3},{value:"Removed Classpath Scanning",id:"removed-classpath-scanning",level:3},{value:"Data Driven Testing",id:"data-driven-testing",level:3},{value:"Table Driven Testing",id:"table-driven-testing",level:3},{value:"Extension overrides",id:"extension-overrides",level:3},{value:"Removed listeners",id:"removed-listeners",level:3},{value:"Deprecated Isolation Modes",id:"deprecated-isolation-modes",level:3},{value:"Improvements",id:"improvements",level:2},{value:"Coroutine Debug Probes",id:"coroutine-debug-probes",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This page lists the features and changes in Kotest 6.0."),(0,i.kt)("h2",{id:"new-features"},"New Features"),(0,i.kt)("h3",{id:"enhanced-concurrency-support"},"Enhanced Concurrency Support"),(0,i.kt)("p",null,"Kotest 6.0 introduces a comprehensive set of concurrency features to improve test execution:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Spec Concurrency Mode"),": Controls how specs (test classes) are executed in relation to each other"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sequential (default): All specs are executed sequentially"),(0,i.kt)("li",{parentName:"ul"},"Concurrent: All specs are executed concurrently"),(0,i.kt)("li",{parentName:"ul"},"LimitedConcurrency(max: Int): Specs are executed concurrently up to a given maximum number"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Test Concurrency Mode"),": Controls how root tests within a spec are executed in relation to each other"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sequential (default): All tests are executed sequentially"),(0,i.kt)("li",{parentName:"ul"},"Concurrent: All tests are executed concurrently"),(0,i.kt)("li",{parentName:"ul"},"LimitedConcurrency(max: Int): Tests are executed concurrently up to a given maximum number"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Coroutine Dispatcher Factory"),": Customize the coroutine dispatcher used for executing specs and tests"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Built-in implementation: ThreadPerSpecCoroutineContextFactory"),(0,i.kt)("li",{parentName:"ul"},"Can be configured at project-wide or spec-level"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Blocking Test Mode"),": Addresses issues with timeouts when working with blocking code"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Switches execution to a dedicated thread for the test case"),(0,i.kt)("li",{parentName:"ul"},"Allows the test engine to safely interrupt tests when they time out")))),(0,i.kt)("h3",{id:"package-level-configuration"},"Package-Level Configuration"),(0,i.kt)("p",null,"Package-level configuration allows you to define shared configuration that applies to all specs in a specific package and its sub-packages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"PackageConfig")," class that extends ",(0,i.kt)("inlineCode",{parentName:"li"},"AbstractPackageConfig")," in the target package"),(0,i.kt)("li",{parentName:"ul"},"Configuration resolution follows a clear hierarchy (test-specific \u2192 spec-level \u2192 package-level \u2192 parent package \u2192 global)"),(0,i.kt)("li",{parentName:"ul"},"Supports various configuration options (isolation mode, assertion mode, timeouts, etc.)")),(0,i.kt)("h3",{id:"shared-test-configuration"},"Shared Test Configuration"),(0,i.kt)("p",null,"The new ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultTestConfig")," feature allows you to define shared test configuration that applies to all tests in a spec:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set default configuration values like timeout, invocations, tags, etc."),(0,i.kt)("li",{parentName:"ul"},"Individual tests can override any part of the default configuration"),(0,i.kt)("li",{parentName:"ul"},"Simplifies configuration management for tests with similar requirements")),(0,i.kt)("h3",{id:"new-isolation-mode-instanceperroot"},"New Isolation Mode: InstancePerRoot"),(0,i.kt)("p",null,"A new isolation mode ",(0,i.kt)("inlineCode",{parentName:"p"},"InstancePerRoot")," has been introduced:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creates a new instance of the Spec class for every top-level (root) test case"),(0,i.kt)("li",{parentName:"ul"},"Each root test is executed in its own associated instance"),(0,i.kt)("li",{parentName:"ul"},"Provides better isolation while maintaining a clean structure")),(0,i.kt)("h3",{id:"testclock-implementation"},"TestClock Implementation"),(0,i.kt)("p",null,"A new ",(0,i.kt)("inlineCode",{parentName:"p"},"TestClock")," implementation has been added for controlling time in tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mutable Clock that supports millisecond precision"),(0,i.kt)("li",{parentName:"ul"},"Allows setting specific instants and manipulating time with plus and minus operations"),(0,i.kt)("li",{parentName:"ul"},"Useful for testing time-dependent code in a deterministic way")),(0,i.kt)("h3",{id:"enhanced-coroutine-debugging"},"Enhanced Coroutine Debugging"),(0,i.kt)("p",null,"Improved support for debugging coroutines in tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CoroutineDebugProbeInterceptor for installing the kotlinx debug probe for coroutines"),(0,i.kt)("li",{parentName:"ul"},"Helps with debugging by providing stack traces and dumping coroutine information"),(0,i.kt)("li",{parentName:"ul"},"Can be enabled on a per-test basis")),(0,i.kt)("h3",{id:"decoroutinator-extension"},"Decoroutinator Extension"),(0,i.kt)("p",null,"A new extension for improving coroutine stack traces:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Integrates with ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Anamorphosee/stacktrace-decoroutinator"},"Stacktrace Decoroutinator")),(0,i.kt)("li",{parentName:"ul"},"Removes internal coroutine implementation details from stack traces"),(0,i.kt)("li",{parentName:"ul"},"Makes stack traces cleaner and easier to understand"),(0,i.kt)("li",{parentName:"ul"},"Helps quickly identify the source of errors in coroutine-based tests")),(0,i.kt)("h3",{id:"power-assert-support"},"Power Assert Support"),(0,i.kt)("p",null,"Kotest 6.0 integrates with Kotlin 2.2's Power Assert feature to provide enhanced assertion failure messages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Displays values of each part of an expression when an assertion fails"),(0,i.kt)("li",{parentName:"ul"},"Makes debugging test failures easier by showing the actual values in the expression"),(0,i.kt)("li",{parentName:"ul"},"Works with ",(0,i.kt)("inlineCode",{parentName:"li"},"shouldBe")," and other configurable assertion functions"),(0,i.kt)("li",{parentName:"ul"},"See the ",(0,i.kt)("a",{parentName:"li",href:"/docs/assertions/power-assert"},"Power Assert documentation")," for details and setup instructions")),(0,i.kt)("h2",{id:"breaking-changes"},"Breaking Changes"),(0,i.kt)("h3",{id:"minimum-versions"},"Minimum Versions"),(0,i.kt)("p",null,"Kotest 6.0 requires a minimum of JDK 11 and Kotlin 2.2."),(0,i.kt)("h3",{id:"kotlin-multiplatform-support"},"Kotlin Multiplatform Support"),(0,i.kt)("p",null,"The KMP support in Kotest 6.0 has changed from previous versions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No longer requires a compiler plugin"),(0,i.kt)("li",{parentName:"ul"},"Simplified setup process for multiplatform projects"),(0,i.kt)("li",{parentName:"ul"},"See the ",(0,i.kt)("a",{parentName:"li",href:"https://kotest.io/docs/framework/project-setup.html"},"setup documentation")," for details")),(0,i.kt)("h3",{id:"extensions-publishing"},"Extensions Publishing"),(0,i.kt)("p",null,"All extensions are now published under the ",(0,i.kt)("inlineCode",{parentName:"p"},"io.kotest")," group:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Version cadence tied to main Kotest releases"),(0,i.kt)("li",{parentName:"ul"},"Simplifies dependency management"),(0,i.kt)("li",{parentName:"ul"},"Affects all extension modules (Allure, Koin, Ktor, MockServer, Spring, etc.)")),(0,i.kt)("h3",{id:"project-configuration-location"},"Project Configuration Location"),(0,i.kt)("p",null,"The location of the project config instance is now required to be at a specific path:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"By default will be at ",(0,i.kt)("inlineCode",{parentName:"li"},"io.kotest.provided.ProjectConfig")),(0,i.kt)("li",{parentName:"ul"},"Can be overridden by setting the ",(0,i.kt)("inlineCode",{parentName:"li"},"kotest.framework.config.fqn")," system property"),(0,i.kt)("li",{parentName:"ul"},"Will not be picked up by the framework if located elsewhere"),(0,i.kt)("li",{parentName:"ul"},"Different from Kotest 5.x behavior")),(0,i.kt)("h3",{id:"removed-classpath-scanning"},"Removed Classpath Scanning"),(0,i.kt)("p",null,"Classpath scanning for extensions has been removed in Kotest 6.0:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"@AutoScan")," annotation is no longer supported"),(0,i.kt)("li",{parentName:"ul"},"Extensions must now be explicitly registered")),(0,i.kt)("p",null,"To register extensions, use one of these approaches:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add extensions to your project config:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"object ProjectConfig : AbstractProjectConfig() {\n  override val extensions = listOf(\n    MyExtension(),\n    AnotherExtension()\n  )\n}\n"))),(0,i.kt)("li",{parentName:"ul"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"@ApplyExtension")," annotation on your spec classes:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@ApplyExtension(MyExtension::class)\nclass MySpec : FunSpec() {\n  // tests here\n}\n")))),(0,i.kt)("h3",{id:"data-driven-testing"},"Data Driven Testing"),(0,i.kt)("p",null,"If you are using the Kotest 5.0+ ",(0,i.kt)("inlineCode",{parentName:"p"},"withData")," support, you no longer need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"kotest-framework-data")," dependency\nto your project as this has been merged into the core framework."),(0,i.kt)("h3",{id:"table-driven-testing"},"Table Driven Testing"),(0,i.kt)("p",null,"If you are using the Kotest 4.x era table driven testing, you will need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"kotest-assertions-table")," dependency\nto your project as this has been moved out of the core framework."),(0,i.kt)("h3",{id:"extension-overrides"},"Extension overrides"),(0,i.kt)("p",null,"Inside the project config, extensions are now a val not a function.\nSo if you had before:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun listeners() = ...\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun extensions() = ...\n")),(0,i.kt)("p",null,"Change this to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"override val extensions = ...\n")),(0,i.kt)("h3",{id:"removed-listeners"},"Removed listeners"),(0,i.kt)("p",null,"The System.exit and System.env override extensions have been removed due to the deprecation of the SecurityManager in Java."),(0,i.kt)("h3",{id:"deprecated-isolation-modes"},"Deprecated Isolation Modes"),(0,i.kt)("p",null,"The following isolation modes are now deprecated due to undefined behavior in edge cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InstancePerTest")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InstancePerLeaf"))),(0,i.kt)("p",null,"It is recommended to use ",(0,i.kt)("inlineCode",{parentName:"p"},"InstancePerRoot")," instead."),(0,i.kt)("h2",{id:"improvements"},"Improvements"),(0,i.kt)("h3",{id:"coroutine-debug-probes"},"Coroutine Debug Probes"),(0,i.kt)("p",null,"Enhanced support for coroutine debugging:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Option to enable debug probes for better visibility into coroutine execution"),(0,i.kt)("li",{parentName:"ul"},"Helps identify issues with coroutines in tests"),(0,i.kt)("li",{parentName:"ul"},"Provides detailed stack traces and coroutine dumps when errors occur")))}c.isMDXComponent=!0}}]);